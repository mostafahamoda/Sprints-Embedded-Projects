
EXT_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068a  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b8  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031e  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  74:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EXT_INT_INIT>:
extern void EXT_INT_INIT(u8 u8Int_channel,u8 u8Int_Edge)
{
	/*
	* Setting the Global Interrupt Bit
	*/
	SET_BIT(SREG_EXT_INT_REG,I_EXT_INT) ;
  7c:	9f b7       	in	r25, 0x3f	; 63
  7e:	90 68       	ori	r25, 0x80	; 128
  80:	9f bf       	out	0x3f, r25	; 63
	/*
	* State Machine for the Interrupt Used 
	*/
	if(u8Int_channel == INT_ZERO)
  82:	81 11       	cpse	r24, r1
  84:	22 c0       	rjmp	.+68     	; 0xca <EXT_INT_INIT+0x4e>
	{
		if(u8Int_Edge == RISING_EDGE)
  86:	61 30       	cpi	r22, 0x01	; 1
  88:	39 f4       	brne	.+14     	; 0x98 <EXT_INT_INIT+0x1c>
		{
			SET_BIT(GICR_REG,INT0) ;
  8a:	8b b7       	in	r24, 0x3b	; 59
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8b bf       	out	0x3b, r24	; 59
			MCUCR_REG |= ((1<<ISC00) | (1<<ISC01)) ;	
  90:	85 b7       	in	r24, 0x35	; 53
  92:	83 60       	ori	r24, 0x03	; 3
  94:	85 bf       	out	0x35, r24	; 53
  96:	08 95       	ret
		}	
		else if(u8Int_Edge == FALLING_EDGE)
  98:	61 11       	cpse	r22, r1
  9a:	0a c0       	rjmp	.+20     	; 0xb0 <EXT_INT_INIT+0x34>
		{
			SET_BIT(GICR_REG,INT0) ;
  9c:	8b b7       	in	r24, 0x3b	; 59
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((0<<ISC00) | (1<<ISC01)) ;
			SET_BIT(MCUCR_REG,ISC01) ;
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR_REG,ISC00) ;
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	85 bf       	out	0x35, r24	; 53
  ae:	08 95       	ret
		}
		else if(u8Int_Edge == ANY_EDGE)
  b0:	62 30       	cpi	r22, 0x02	; 2
  b2:	09 f0       	breq	.+2      	; 0xb6 <EXT_INT_INIT+0x3a>
  b4:	43 c0       	rjmp	.+134    	; 0x13c <EXT_INT_INIT+0xc0>
		{
			SET_BIT(GICR_REG,INT0) ;
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((1<<ISC00)|(0<<ISC01)) ;
			CLEAR_BIT(MCUCR_REG,ISC01) ;
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC00) ;
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	08 95       	ret
		}
	}	
	else if(u8Int_channel == INT_ONE)
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	21 f5       	brne	.+72     	; 0x116 <EXT_INT_INIT+0x9a>
	{
		if(u8Int_Edge == RISING_EDGE)
  ce:	61 30       	cpi	r22, 0x01	; 1
  d0:	51 f4       	brne	.+20     	; 0xe6 <EXT_INT_INIT+0x6a>
		{
			SET_BIT(GICR_REG,INT1) ;
  d2:	8b b7       	in	r24, 0x3b	; 59
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((1<<ISC10)|(1<<ISC11)) ;
			SET_BIT(MCUCR_REG,ISC10) ;
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC11) ;
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	85 bf       	out	0x35, r24	; 53
  e4:	08 95       	ret
		}
		else if(u8Int_Edge == FALLING_EDGE)
  e6:	61 11       	cpse	r22, r1
  e8:	0a c0       	rjmp	.+20     	; 0xfe <EXT_INT_INIT+0x82>
		{
			SET_BIT(GICR_REG,INT1) ;
  ea:	8b b7       	in	r24, 0x3b	; 59
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((0<<ISC10)|(1<<ISC11)) ;
			CLEAR_BIT(MCUCR_REG,ISC10) ;
  f0:	85 b7       	in	r24, 0x35	; 53
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC11) ;
  f6:	85 b7       	in	r24, 0x35	; 53
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	85 bf       	out	0x35, r24	; 53
  fc:	08 95       	ret
		}
		else if(u8Int_Edge == ANY_EDGE)
  fe:	62 30       	cpi	r22, 0x02	; 2
 100:	e9 f4       	brne	.+58     	; 0x13c <EXT_INT_INIT+0xc0>
		{
			SET_BIT(GICR_REG,INT1) ;
 102:	8b b7       	in	r24, 0x3b	; 59
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((1<<ISC10)|(0<<ISC11)) ;
			CLEAR_BIT(MCUCR_REG,ISC11) ;
 108:	85 b7       	in	r24, 0x35	; 53
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC10) ;
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	84 60       	ori	r24, 0x04	; 4
 112:	85 bf       	out	0x35, r24	; 53
 114:	08 95       	ret
		}
		
	}
	else if(u8Int_channel == INT_TWO)
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	89 f4       	brne	.+34     	; 0x13c <EXT_INT_INIT+0xc0>
	{
		if(u8Int_Edge == RISING_EDGE)
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	39 f4       	brne	.+14     	; 0x12c <EXT_INT_INIT+0xb0>
		{
			SET_BIT(GICR_REG,INT2) ;
 11e:	8b b7       	in	r24, 0x3b	; 59
 120:	80 62       	ori	r24, 0x20	; 32
 122:	8b bf       	out	0x3b, r24	; 59
			SET_BIT(MCUCSR_REG,ISC2) ;
 124:	84 b7       	in	r24, 0x34	; 52
 126:	80 64       	ori	r24, 0x40	; 64
 128:	84 bf       	out	0x34, r24	; 52
 12a:	08 95       	ret
		}
		else if(u8Int_Edge == FALLING_EDGE)
 12c:	61 11       	cpse	r22, r1
 12e:	06 c0       	rjmp	.+12     	; 0x13c <EXT_INT_INIT+0xc0>
		{
			SET_BIT(GICR_REG,INT2) ;
 130:	8b b7       	in	r24, 0x3b	; 59
 132:	80 62       	ori	r24, 0x20	; 32
 134:	8b bf       	out	0x3b, r24	; 59
			CLEAR_BIT(MCUCSR_REG,ISC2) ;
 136:	84 b7       	in	r24, 0x34	; 52
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	84 bf       	out	0x34, r24	; 52
 13c:	08 95       	ret

0000013e <__vector_3>:
#include "EXT_INT.h"
#include "avr/io.h"
#include "avr/interrupt.h"
volatile int hamo = 0 ;
ISR(INT2_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
	if(hamo == 0)
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	89 2b       	or	r24, r25
 156:	59 f4       	brne	.+22     	; 0x16e <__vector_3+0x30>
	{
	DDRB = 0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xF0 ;
 15c:	80 ef       	ldi	r24, 0xF0	; 240
 15e:	88 bb       	out	0x18, r24	; 24
	hamo = 1 ;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	05 c0       	rjmp	.+10     	; 0x178 <__vector_3+0x3a>
	}
	else
	{
		PORTB = 0x00 ;
 16e:	18 ba       	out	0x18, r1	; 24
		hamo = 0 ;
 170:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 174:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:
	/*
	sei();
	SET_BIT(GICR_REG,INT0) ;
	MCUCR_REG |= ((1<<ISC00) | (1<<ISC01)) ;
	*/
	EXT_INT_INIT(INT_TWO,RISING_EDGE);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 3e 00 	call	0x7c	; 0x7c <EXT_INT_INIT>
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x8>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
