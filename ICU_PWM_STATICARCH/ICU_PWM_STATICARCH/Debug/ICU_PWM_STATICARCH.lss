
ICU_PWM_STATICARCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000628  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800060  00800060  0000069c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f2c  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c8  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c92  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac8  00000000  00000000  000035b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendfallingedge>:
 }
 
 #elif defined LCD_4
 void sendfallingedge(void)
 {
	 SET_BIT(PORTA,EN) ;
  92:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e3       	ldi	r24, 0x3F	; 63
  96:	9f e1       	ldi	r25, 0x1F	; 31
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <sendfallingedge+0x6>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <sendfallingedge+0xc>
  9e:	00 00       	nop
	 _delay_ms(4) ;
	 CLR_BIT(PORTA,EN) ;
  a0:	db 98       	cbi	0x1b, 3	; 27
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	9f e1       	ldi	r25, 0x1F	; 31
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <sendfallingedge+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <sendfallingedge+0x1a>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <LCD_vSendCmd>:
	 _delay_ms(4) ;
 }
  void LCD_vSendCmd(char cmd)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	CLR_BIT(PORTA,RS) ;
  b4:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= 0x0f  ;
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	8b bb       	out	0x1b, r24	; 27
	PORTA |= cmd&0xf0 ;
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	9c 2f       	mov	r25, r28
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	89 2b       	or	r24, r25
  c4:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendfallingedge>
	PORTA &= 0x0f ;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (cmd<<4) ;
  d0:	2b b3       	in	r18, 0x1b	; 27
  d2:	30 e1       	ldi	r19, 0x10	; 16
  d4:	c3 9f       	mul	r28, r19
  d6:	c0 01       	movw	r24, r0
  d8:	11 24       	eor	r1, r1
  da:	82 2b       	or	r24, r18
  dc:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
  de:	0e 94 49 00 	call	0x92	; 0x92 <sendfallingedge>
}
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <LCD_vInit>:

  void LCD_vInit(void)
{
	DDRA = 0xF0 ;
  e6:	80 ef       	ldi	r24, 0xF0	; 240
  e8:	8a bb       	out	0x1a, r24	; 26
	DDRA |= 0x0E ;
  ea:	8a b3       	in	r24, 0x1a	; 26
  ec:	8e 60       	ori	r24, 0x0E	; 14
  ee:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(PORTA,RW) ;
  f0:	da 98       	cbi	0x1b, 2	; 27
	LCD_vSendCmd(0x33) ;
  f2:	83 e3       	ldi	r24, 0x33	; 51
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSendCmd>
	LCD_vSendCmd(0x32) ;
  f8:	82 e3       	ldi	r24, 0x32	; 50
  fa:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSendCmd>
	LCD_vSendCmd(0x28) ;
  fe:	88 e2       	ldi	r24, 0x28	; 40
 100:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSendCmd>
	// blink cursor
	LCD_vSendCmd(0x0F) ;
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSendCmd>
	// clear screen
	LCD_vSendCmd(0x01) ;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSendCmd>
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9c e9       	ldi	r25, 0x9C	; 156
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_vInit+0x2e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_vInit+0x34>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <__vector_3>:
volatile u32 gu32Band_Width  ;
extern  u32 Ignite_Flag_Var ;
char band[20] = {0} ;*/
	
ISR(INT2_vect)
{	
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	if(hamo == 0)
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 134:	89 2b       	or	r24, r25
 136:	51 f4       	brne	.+20     	; 0x14c <__vector_3+0x2e>
	{
		DDRB = 0xF0 ;
 138:	80 ef       	ldi	r24, 0xF0	; 240
 13a:	87 bb       	out	0x17, r24	; 23
		PORTB = 0xF0 ;
 13c:	88 bb       	out	0x18, r24	; 24
		hamo = 1 ;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <__vector_3+0x38>
	}
	else
	{
		PORTB = 0x00 ;
 14c:	18 ba       	out	0x18, r1	; 24
		hamo = 0 ;
 14e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:
		/ *gu8_DODO = 0 ;* /
		gu8_signal = SIGNAL_START ;
	}
}
*/
	LCD_vInit() ;
 164:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_vInit>
	EXT_INT_INIT(INT_TWO,RISING_EDGE) ;
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 b9 00 	call	0x172	; 0x172 <EXT_INT_INIT>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xc>

00000172 <EXT_INT_INIT>:
extern void EXT_INT_INIT(u8 u8Int_channel,u8 u8Int_Edge)
{
	/*
	* Setting the Global Interrupt Bit
	*/
	SET_BIT(SREG_EXT_INT_REG,I_EXT_INT) ;
 172:	9f b7       	in	r25, 0x3f	; 63
 174:	90 68       	ori	r25, 0x80	; 128
 176:	9f bf       	out	0x3f, r25	; 63
	/*
	* State Machine for the Interrupt Used 
	*/
	if(u8Int_channel == INT_ZERO)
 178:	81 11       	cpse	r24, r1
 17a:	22 c0       	rjmp	.+68     	; 0x1c0 <EXT_INT_INIT+0x4e>
	{
		if(u8Int_Edge == RISING_EDGE)
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	39 f4       	brne	.+14     	; 0x18e <EXT_INT_INIT+0x1c>
		{
			SET_BIT(GICR_REG,INT0) ;
 180:	8b b7       	in	r24, 0x3b	; 59
 182:	80 64       	ori	r24, 0x40	; 64
 184:	8b bf       	out	0x3b, r24	; 59
			MCUCR_REG |= ((1<<ISC00) | (1<<ISC01)) ;	
 186:	85 b7       	in	r24, 0x35	; 53
 188:	83 60       	ori	r24, 0x03	; 3
 18a:	85 bf       	out	0x35, r24	; 53
 18c:	08 95       	ret
		}	
		else if(u8Int_Edge == FALLING_EDGE)
 18e:	61 11       	cpse	r22, r1
 190:	0a c0       	rjmp	.+20     	; 0x1a6 <EXT_INT_INIT+0x34>
		{
			SET_BIT(GICR_REG,INT0) ;
 192:	8b b7       	in	r24, 0x3b	; 59
 194:	80 64       	ori	r24, 0x40	; 64
 196:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((0<<ISC00) | (1<<ISC01)) ;
			SET_BIT(MCUCR_REG,ISC01) ;
 198:	85 b7       	in	r24, 0x35	; 53
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR_REG,ISC00) ;
 19e:	85 b7       	in	r24, 0x35	; 53
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	85 bf       	out	0x35, r24	; 53
 1a4:	08 95       	ret
		}
		else if(u8Int_Edge == ANY_EDGE)
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	09 f0       	breq	.+2      	; 0x1ac <EXT_INT_INIT+0x3a>
 1aa:	43 c0       	rjmp	.+134    	; 0x232 <EXT_INT_INIT+0xc0>
		{
			SET_BIT(GICR_REG,INT0) ;
 1ac:	8b b7       	in	r24, 0x3b	; 59
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((1<<ISC00)|(0<<ISC01)) ;
			CLEAR_BIT(MCUCR_REG,ISC01) ;
 1b2:	85 b7       	in	r24, 0x35	; 53
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC00) ;
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	85 bf       	out	0x35, r24	; 53
 1be:	08 95       	ret
		}
	}	
	else if(u8Int_channel == INT_ONE)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	21 f5       	brne	.+72     	; 0x20c <EXT_INT_INIT+0x9a>
	{
		if(u8Int_Edge == RISING_EDGE)
 1c4:	61 30       	cpi	r22, 0x01	; 1
 1c6:	51 f4       	brne	.+20     	; 0x1dc <EXT_INT_INIT+0x6a>
		{
			SET_BIT(GICR_REG,INT1) ;
 1c8:	8b b7       	in	r24, 0x3b	; 59
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((1<<ISC10)|(1<<ISC11)) ;
			SET_BIT(MCUCR_REG,ISC10) ;
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC11) ;
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	85 bf       	out	0x35, r24	; 53
 1da:	08 95       	ret
		}
		else if(u8Int_Edge == FALLING_EDGE)
 1dc:	61 11       	cpse	r22, r1
 1de:	0a c0       	rjmp	.+20     	; 0x1f4 <EXT_INT_INIT+0x82>
		{
			SET_BIT(GICR_REG,INT1) ;
 1e0:	8b b7       	in	r24, 0x3b	; 59
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((0<<ISC10)|(1<<ISC11)) ;
			CLEAR_BIT(MCUCR_REG,ISC10) ;
 1e6:	85 b7       	in	r24, 0x35	; 53
 1e8:	8b 7f       	andi	r24, 0xFB	; 251
 1ea:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC11) ;
 1ec:	85 b7       	in	r24, 0x35	; 53
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	85 bf       	out	0x35, r24	; 53
 1f2:	08 95       	ret
		}
		else if(u8Int_Edge == ANY_EDGE)
 1f4:	62 30       	cpi	r22, 0x02	; 2
 1f6:	e9 f4       	brne	.+58     	; 0x232 <EXT_INT_INIT+0xc0>
		{
			SET_BIT(GICR_REG,INT1) ;
 1f8:	8b b7       	in	r24, 0x3b	; 59
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	8b bf       	out	0x3b, r24	; 59
			//MCUCR_REG |= ((1<<ISC10)|(0<<ISC11)) ;
			CLEAR_BIT(MCUCR_REG,ISC11) ;
 1fe:	85 b7       	in	r24, 0x35	; 53
 200:	87 7f       	andi	r24, 0xF7	; 247
 202:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC10) ;
 204:	85 b7       	in	r24, 0x35	; 53
 206:	84 60       	ori	r24, 0x04	; 4
 208:	85 bf       	out	0x35, r24	; 53
 20a:	08 95       	ret
		}
		
	}
	else if(u8Int_channel == INT_TWO)
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	89 f4       	brne	.+34     	; 0x232 <EXT_INT_INIT+0xc0>
	{
		if(u8Int_Edge == RISING_EDGE)
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	39 f4       	brne	.+14     	; 0x222 <EXT_INT_INIT+0xb0>
		{
			SET_BIT(GICR_REG,INT2) ;
 214:	8b b7       	in	r24, 0x3b	; 59
 216:	80 62       	ori	r24, 0x20	; 32
 218:	8b bf       	out	0x3b, r24	; 59
			SET_BIT(MCUCSR_REG,ISC2) ;
 21a:	84 b7       	in	r24, 0x34	; 52
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	84 bf       	out	0x34, r24	; 52
 220:	08 95       	ret
		}
		else if(u8Int_Edge == FALLING_EDGE)
 222:	61 11       	cpse	r22, r1
 224:	06 c0       	rjmp	.+12     	; 0x232 <EXT_INT_INIT+0xc0>
		{
			SET_BIT(GICR_REG,INT2) ;
 226:	8b b7       	in	r24, 0x3b	; 59
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8b bf       	out	0x3b, r24	; 59
			CLEAR_BIT(MCUCSR_REG,ISC2) ;
 22c:	84 b7       	in	r24, 0x34	; 52
 22e:	8f 7b       	andi	r24, 0xBF	; 191
 230:	84 bf       	out	0x34, r24	; 52
 232:	08 95       	ret

00000234 <__vector_11>:
	// Cutting the Source Clock
	CLEAR_BIT(TCCR1B_Reg,CS12_Reg) ;
	CLEAR_BIT(TCCR1B_Reg,CS11_Reg) ;
	CLEAR_BIT(TCCR1B_Reg,CS10_Reg) ;
	/*Clearing Ignite_Variable*/
	Ignite_Flag_Var_1 = 0 ;
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 24a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 24e:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 252:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 256:	89 2b       	or	r24, r25
 258:	8a 2b       	or	r24, r26
 25a:	8b 2b       	or	r24, r27
 25c:	09 f4       	brne	.+2      	; 0x260 <__vector_11+0x2c>
 25e:	44 c0       	rjmp	.+136    	; 0x2e8 <__vector_11+0xb4>
 260:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 264:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 268:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 26c:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 270:	8f 3f       	cpi	r24, 0xFF	; 255
 272:	91 05       	cpc	r25, r1
 274:	a1 05       	cpc	r26, r1
 276:	b1 05       	cpc	r27, r1
 278:	98 f4       	brcc	.+38     	; 0x2a0 <__vector_11+0x6c>
 27a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 27e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 282:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 286:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 28a:	80 95       	com	r24
 28c:	82 bf       	out	0x32, r24	; 50
 28e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Ticks>
 292:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Ticks+0x1>
 296:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Ticks+0x2>
 29a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Ticks+0x3>
 29e:	54 c0       	rjmp	.+168    	; 0x348 <__vector_11+0x114>
 2a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 2a4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 2a8:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 2ac:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 2b0:	8f 3f       	cpi	r24, 0xFF	; 255
 2b2:	91 05       	cpc	r25, r1
 2b4:	a1 05       	cpc	r26, r1
 2b6:	b1 05       	cpc	r27, r1
 2b8:	08 f4       	brcc	.+2      	; 0x2bc <__vector_11+0x88>
 2ba:	46 c0       	rjmp	.+140    	; 0x348 <__vector_11+0x114>
 2bc:	12 be       	out	0x32, r1	; 50
 2be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 2c2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 2c6:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 2ca:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	91 09       	sbc	r25, r1
 2d2:	a1 09       	sbc	r26, r1
 2d4:	b1 09       	sbc	r27, r1
 2d6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 2da:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 2de:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 2e2:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
 2e6:	30 c0       	rjmp	.+96     	; 0x348 <__vector_11+0x114>
 2e8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 2ec:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 2f0:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 2f4:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 2f8:	89 2b       	or	r24, r25
 2fa:	8a 2b       	or	r24, r26
 2fc:	8b 2b       	or	r24, r27
 2fe:	21 f5       	brne	.+72     	; 0x348 <__vector_11+0x114>
 300:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Initial_ticks>
 304:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Initial_ticks+0x1>
 308:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <Initial_ticks+0x2>
 30c:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <Initial_ticks+0x3>
 310:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 314:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 318:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 31c:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
 320:	12 be       	out	0x32, r1	; 50
 322:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Ignite_Flag_Var>
 326:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Ignite_Flag_Var+0x1>
 32a:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <Ignite_Flag_Var+0x2>
 32e:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <Ignite_Flag_Var+0x3>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	a1 1d       	adc	r26, r1
 336:	b1 1d       	adc	r27, r1
 338:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Ignite_Flag_Var>
 33c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Ignite_Flag_Var+0x1>
 340:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <Ignite_Flag_Var+0x2>
 344:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <Ignite_Flag_Var+0x3>
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__vector_9>:
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 372:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 376:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 37a:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 37e:	89 2b       	or	r24, r25
 380:	8a 2b       	or	r24, r26
 382:	8b 2b       	or	r24, r27
 384:	09 f4       	brne	.+2      	; 0x388 <__vector_9+0x2e>
 386:	47 c0       	rjmp	.+142    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 388:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 38c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 390:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 394:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 398:	8f 3f       	cpi	r24, 0xFF	; 255
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	a1 05       	cpc	r26, r1
 39e:	b1 05       	cpc	r27, r1
 3a0:	a8 f4       	brcc	.+42     	; 0x3cc <__vector_9+0x72>
 3a2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 3a6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 3aa:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 3ae:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 3b2:	80 95       	com	r24
 3b4:	90 95       	com	r25
 3b6:	9d bd       	out	0x2d, r25	; 45
 3b8:	8c bd       	out	0x2c, r24	; 44
 3ba:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Ticks>
 3be:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Ticks+0x1>
 3c2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Ticks+0x2>
 3c6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Ticks+0x3>
 3ca:	56 c0       	rjmp	.+172    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3cc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 3d0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 3d4:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 3d8:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 3dc:	8f 3f       	cpi	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	a1 05       	cpc	r26, r1
 3e2:	b1 05       	cpc	r27, r1
 3e4:	08 f4       	brcc	.+2      	; 0x3e8 <__vector_9+0x8e>
 3e6:	48 c0       	rjmp	.+144    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3e8:	1d bc       	out	0x2d, r1	; 45
 3ea:	1c bc       	out	0x2c, r1	; 44
 3ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 3f0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 3f4:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 3f8:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	a1 09       	sbc	r26, r1
 402:	b1 09       	sbc	r27, r1
 404:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 408:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 40c:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 410:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
 414:	31 c0       	rjmp	.+98     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 416:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 41a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 41e:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 422:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 426:	89 2b       	or	r24, r25
 428:	8a 2b       	or	r24, r26
 42a:	8b 2b       	or	r24, r27
 42c:	29 f5       	brne	.+74     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 42e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Initial_ticks>
 432:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Initial_ticks+0x1>
 436:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <Initial_ticks+0x2>
 43a:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <Initial_ticks+0x3>
 43e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 442:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 446:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 44a:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
 44e:	1d bc       	out	0x2d, r1	; 45
 450:	1c bc       	out	0x2c, r1	; 44
 452:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Ignite_Flag_Var_1>
 456:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Ignite_Flag_Var_1+0x1>
 45a:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <Ignite_Flag_Var_1+0x2>
 45e:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <Ignite_Flag_Var_1+0x3>
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	a1 1d       	adc	r26, r1
 466:	b1 1d       	adc	r27, r1
 468:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Ignite_Flag_Var_1>
 46c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <Ignite_Flag_Var_1+0x1>
 470:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <Ignite_Flag_Var_1+0x2>
 474:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <Ignite_Flag_Var_1+0x3>
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <Timer_Stop_2>:
}
void Timer_Stop_2(void)
{
	// Cutting the Source Clock
	CLEAR_BIT(TCCR2_Reg,CS22_Reg) ;
 48c:	85 b5       	in	r24, 0x25	; 37
 48e:	8b 7f       	andi	r24, 0xFB	; 251
 490:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_Reg,CS21_Reg) ;
 492:	85 b5       	in	r24, 0x25	; 37
 494:	8d 7f       	andi	r24, 0xFD	; 253
 496:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_Reg,CS20_Reg) ;
 498:	85 b5       	in	r24, 0x25	; 37
 49a:	8e 7f       	andi	r24, 0xFE	; 254
 49c:	85 bd       	out	0x25, r24	; 37
	/*Clearing Ignite_Variable*/
	Ignite_Flag_Var_2 = 0 ;
 49e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Ignite_Flag_Var_2>
 4a2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Ignite_Flag_Var_2+0x1>
 4a6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Ignite_Flag_Var_2+0x2>
 4aa:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Ignite_Flag_Var_2+0x3>
 4ae:	08 95       	ret

000004b0 <__vector_5>:
		TCNT0_Reg = 0x00 ; 
		Ignite_Flag_Var ++ ;
	}
}
ISR(TIMER2_OVF_vect)
{
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	if(Ticks != 0)
 4d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 4d6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 4da:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 4de:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 4e2:	89 2b       	or	r24, r25
 4e4:	8a 2b       	or	r24, r26
 4e6:	8b 2b       	or	r24, r27
 4e8:	09 f4       	brne	.+2      	; 0x4ec <__vector_5+0x3c>
 4ea:	58 c0       	rjmp	.+176    	; 0x59c <__vector_5+0xec>
	{
		if(Ticks < (Timer2_OVF))
 4ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 4f0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 4f4:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 4f8:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 4fc:	8f 3f       	cpi	r24, 0xFF	; 255
 4fe:	91 05       	cpc	r25, r1
 500:	a1 05       	cpc	r26, r1
 502:	b1 05       	cpc	r27, r1
 504:	38 f5       	brcc	.+78     	; 0x554 <__vector_5+0xa4>
		{
			/*Initializing the Timer Register*/
			TCNT2_Reg = Timer2_OVF-Ticks;
 506:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 50a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 50e:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 512:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 516:	80 95       	com	r24
 518:	84 bd       	out	0x24, r24	; 36
			Ticks = Ticks - Ticks ;
 51a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 51e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 522:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 526:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 52a:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <Ticks>
 52e:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <Ticks+0x1>
 532:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Ticks+0x2>
 536:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <Ticks+0x3>
 53a:	84 1b       	sub	r24, r20
 53c:	95 0b       	sbc	r25, r21
 53e:	a6 0b       	sbc	r26, r22
 540:	b7 0b       	sbc	r27, r23
 542:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 546:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 54a:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 54e:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
 552:	57 c0       	rjmp	.+174    	; 0x602 <__vector_5+0x152>
			//LCD_vPrintchar('Hff') ;
			//PORTB = 0x00 ;
		}
		else if(Ticks >= (Timer2_OVF))
 554:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 558:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 55c:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 560:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 564:	8f 3f       	cpi	r24, 0xFF	; 255
 566:	91 05       	cpc	r25, r1
 568:	a1 05       	cpc	r26, r1
 56a:	b1 05       	cpc	r27, r1
 56c:	08 f4       	brcc	.+2      	; 0x570 <__vector_5+0xc0>
 56e:	49 c0       	rjmp	.+146    	; 0x602 <__vector_5+0x152>
		{
			/*Initializing the Timer Register*/
			TCNT2_Reg = 0x00 ;
 570:	14 bc       	out	0x24, r1	; 36
			Ticks = Ticks - Timer2_OVF ;
 572:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 576:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 57a:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 57e:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	91 09       	sbc	r25, r1
 586:	a1 09       	sbc	r26, r1
 588:	b1 09       	sbc	r27, r1
 58a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 58e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 592:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 596:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
 59a:	33 c0       	rjmp	.+102    	; 0x602 <__vector_5+0x152>
		}
	}
	else if(Ticks == 0)
 59c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Ticks>
 5a0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Ticks+0x1>
 5a4:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <Ticks+0x2>
 5a8:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <Ticks+0x3>
 5ac:	89 2b       	or	r24, r25
 5ae:	8a 2b       	or	r24, r26
 5b0:	8b 2b       	or	r24, r27
 5b2:	39 f5       	brne	.+78     	; 0x602 <__vector_5+0x152>
	{
		Ticks = Initial_ticks ;
 5b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Initial_ticks>
 5b8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Initial_ticks+0x1>
 5bc:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <Initial_ticks+0x2>
 5c0:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <Initial_ticks+0x3>
 5c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Ticks>
 5c8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Ticks+0x1>
 5cc:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <Ticks+0x2>
 5d0:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <Ticks+0x3>
		TCNT2_Reg = 0x00 ;
 5d4:	14 bc       	out	0x24, r1	; 36
		Ignite_Flag_Var_2 ++ ;
 5d6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Ignite_Flag_Var_2>
 5da:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <Ignite_Flag_Var_2+0x1>
 5de:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <Ignite_Flag_Var_2+0x2>
 5e2:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <Ignite_Flag_Var_2+0x3>
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	a1 1d       	adc	r26, r1
 5ea:	b1 1d       	adc	r27, r1
 5ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Ignite_Flag_Var_2>
 5f0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <Ignite_Flag_Var_2+0x1>
 5f4:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <Ignite_Flag_Var_2+0x2>
 5f8:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <Ignite_Flag_Var_2+0x3>
		CLEAR_BIT(PORTC,2) ;
 5fc:	aa 98       	cbi	0x15, 2	; 21
		//LCD_vPrintchar(Ignite_Flag_Var_2+'0') ;
		Timer_Stop_2() ;
 5fe:	0e 94 46 02 	call	0x48c	; 0x48c <Timer_Stop_2>
	}
}
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	bf 91       	pop	r27
 608:	af 91       	pop	r26
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	7f 91       	pop	r23
 610:	6f 91       	pop	r22
 612:	5f 91       	pop	r21
 614:	4f 91       	pop	r20
 616:	3f 91       	pop	r19
 618:	2f 91       	pop	r18
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
 620:	1f 90       	pop	r1
 622:	18 95       	reti

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
