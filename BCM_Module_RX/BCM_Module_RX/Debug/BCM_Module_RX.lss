
BCM_Module_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800060  00800060  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000daf  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  00002993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_13>
  38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  74:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <BCM_Init>:
	char * Address_G = &BCM_CNFG_BUFF ; 
	/************Constructing the Transmition Frame*************/
	Data_Send = *(Address_G);
	UART_sendByte(Data_Send);
	return ERROR_OK ;
}
  7c:	ff 92       	push	r15
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	29 97       	sbiw	r28, 0x09	; 9
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	8c 01       	movw	r16, r24
  98:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <BCM_CNFG_BUFF+0x8>
  9c:	91 30       	cpi	r25, 0x01	; 1
  9e:	b1 f1       	breq	.+108    	; 0x10c <BCM_Init+0x90>
  a0:	d8 01       	movw	r26, r16
  a2:	8d 91       	ld	r24, X+
  a4:	9c 91       	ld	r25, X
  a6:	9b 83       	std	Y+3, r25	; 0x03
  a8:	8a 83       	std	Y+2, r24	; 0x02
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	8d 83       	std	Y+5, r24	; 0x05
  ae:	19 86       	std	Y+9, r1	; 0x09
  b0:	18 86       	std	Y+8, r1	; 0x08
  b2:	1e 82       	std	Y+6, r1	; 0x06
  b4:	ff 24       	eor	r15, r15
  b6:	f3 94       	inc	r15
  b8:	f9 82       	std	Y+1, r15	; 0x01
  ba:	1f 82       	std	Y+7, r1	; 0x07
  bc:	fc 82       	std	Y+4, r15	; 0x04
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_init>
  c6:	f8 01       	movw	r30, r16
  c8:	86 81       	ldd	r24, Z+6	; 0x06
  ca:	97 81       	ldd	r25, Z+7	; 0x07
  cc:	a0 85       	ldd	r26, Z+8	; 0x08
  ce:	b1 85       	ldd	r27, Z+9	; 0x09
  d0:	e4 e7       	ldi	r30, 0x74	; 116
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	83 83       	std	Z+3, r24	; 0x03
  d6:	94 83       	std	Z+4, r25	; 0x04
  d8:	a5 83       	std	Z+5, r26	; 0x05
  da:	b6 83       	std	Z+6, r27	; 0x06
  dc:	d8 01       	movw	r26, r16
  de:	14 96       	adiw	r26, 0x04	; 4
  e0:	8d 91       	ld	r24, X+
  e2:	9c 91       	ld	r25, X
  e4:	15 97       	sbiw	r26, 0x05	; 5
  e6:	92 83       	std	Z+2, r25	; 0x02
  e8:	81 83       	std	Z+1, r24	; 0x01
  ea:	1a 96       	adiw	r26, 0x0a	; 10
  ec:	2c 91       	ld	r18, X
  ee:	20 83       	st	Z, r18
  f0:	f0 86       	std	Z+8, r15	; 0x08
  f2:	03 96       	adiw	r24, 0x03	; 3
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Data_Length_BCM>
  fc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Data_Length_BCM+0x1>
 100:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <Data_Length_BCM+0x2>
 104:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <Data_Length_BCM+0x3>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	01 c0       	rjmp	.+2      	; 0x10e <BCM_Init+0x92>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	29 96       	adiw	r28, 0x09	; 9
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	08 95       	ret

00000126 <BCM_Setup_RX>:

BCM_ERROR BCM_Setup_RX(uint32_t *Address_RX,uint32_t Data_Length_RX)
{
	REC_Address = Address_RX ;
 126:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <REC_Address+0x1>
 12a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <REC_Address>
	REC_Length = Data_Length_RX ;
 12e:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <REC_Length+0x1>
 132:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <REC_Length>
}
 136:	08 95       	ret

00000138 <BCM_DISPATCHER_RX>:

BCM_STATE BCM_DISPATCHER_RX(void) 
{
	BCM_STATE VAL;
	if(i_count_RX<REC_Length)
 138:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i_count_RX>
 13c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <i_count_RX+0x1>
 140:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <i_count_RX+0x2>
 144:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <i_count_RX+0x3>
 148:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <REC_Length>
 14c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <REC_Length+0x1>
 150:	82 17       	cp	r24, r18
 152:	93 07       	cpc	r25, r19
 154:	a0 f4       	brcc	.+40     	; 0x17e <BCM_DISPATCHER_RX+0x46>
	{
		UART_recieveByte((REC_Address+i_count_RX)) ;
 156:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <REC_Address>
 15a:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <REC_Address+0x1>
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	0e 94 12 02 	call	0x424	; 0x424 <UART_recieveByte>
		PORTB = *(REC_Address+i_count_RX) ;
 166:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <REC_Address>
 16a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <REC_Address+0x1>
 16e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i_count_RX>
 172:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <i_count_RX+0x1>
 176:	e8 0f       	add	r30, r24
 178:	f9 1f       	adc	r31, r25
 17a:	80 81       	ld	r24, Z
 17c:	88 bb       	out	0x18, r24	; 24
	}
	else
	{
		VAL = ERROR_OK ;
	}
}
 17e:	08 95       	ret

00000180 <main>:
#include "BCM.h"
#define F_CPU 8000000ul
#include <util/delay.h>
extern i_count_RX ;
int main(void)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	6b 97       	sbiw	r28, 0x1b	; 27
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	//LCD_vInit();
	char Arr[13] ={0}  ;
 194:	8e 01       	movw	r16, r28
 196:	0f 5f       	subi	r16, 0xFF	; 255
 198:	1f 4f       	sbci	r17, 0xFF	; 255
 19a:	8d e0       	ldi	r24, 0x0D	; 13
 19c:	f8 01       	movw	r30, r16
 19e:	11 92       	st	Z+, r1
 1a0:	8a 95       	dec	r24
 1a2:	e9 f7       	brne	.-6      	; 0x19e <main+0x1e>
	//LCD_vPrintchar('H') ;
	strBCM_Cfg CONFIG ;
	CONFIG.Address = &Arr ;
 1a4:	c8 01       	movw	r24, r16
 1a6:	01 2e       	mov	r0, r17
 1a8:	00 0c       	add	r0, r0
 1aa:	aa 0b       	sbc	r26, r26
 1ac:	bb 0b       	sbc	r27, r27
 1ae:	8c 8b       	std	Y+20, r24	; 0x14
 1b0:	9d 8b       	std	Y+21, r25	; 0x15
 1b2:	ae 8b       	std	Y+22, r26	; 0x16
 1b4:	bf 8b       	std	Y+23, r27	; 0x17
	CONFIG.BaudRate = 9600 ;
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	95 e2       	ldi	r25, 0x25	; 37
 1ba:	a0 e0       	ldi	r26, 0x00	; 0
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	8e 87       	std	Y+14, r24	; 0x0e
 1c0:	9f 87       	std	Y+15, r25	; 0x0f
 1c2:	a8 8b       	std	Y+16, r26	; 0x10
 1c4:	b9 8b       	std	Y+17, r27	; 0x11
	CONFIG.Data_length = 10 ;
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9b 8b       	std	Y+19, r25	; 0x13
 1cc:	8a 8b       	std	Y+18, r24	; 0x12
	CONFIG.ID = 0x15 ;
 1ce:	85 e1       	ldi	r24, 0x15	; 21
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	88 8f       	std	Y+24, r24	; 0x18
 1d8:	99 8f       	std	Y+25, r25	; 0x19
 1da:	aa 8f       	std	Y+26, r26	; 0x1a
 1dc:	bb 8f       	std	Y+27, r27	; 0x1b
	BCM_Init(&CONFIG) ;
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 96       	adiw	r24, 0x0e	; 14
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <BCM_Init>
	//BCM_Send(0x01) ;
	DDRA = 0xff ;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	8a bb       	out	0x1a, r24	; 26
	BCM_Setup_RX(&Arr,13) ;
 1ea:	4d e0       	ldi	r20, 0x0D	; 13
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	c8 01       	movw	r24, r16
 1f4:	0e 94 93 00 	call	0x126	; 0x126 <BCM_Setup_RX>
	int i ;
    while (1) 
    {
		if(i_count_RX<13)
 1f8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i_count_RX>
 1fc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <i_count_RX+0x1>
 200:	0d 97       	sbiw	r24, 0x0d	; 13
 202:	1c f4       	brge	.+6      	; 0x20a <main+0x8a>
		{
		BCM_DISPATCHER_RX();
 204:	0e 94 9c 00 	call	0x138	; 0x138 <BCM_DISPATCHER_RX>
 208:	f7 cf       	rjmp	.-18     	; 0x1f8 <main+0x78>
 20a:	8d e0       	ldi	r24, 0x0D	; 13
 20c:	90 e0       	ldi	r25, 0x00	; 0
		}		
		else 
		{
			for(i=0;i<13;i++)
			{
				PORTA = Arr[7]	;
 20e:	28 85       	ldd	r18, Y+8	; 0x08
 210:	2b bb       	out	0x1b, r18	; 27
 212:	01 97       	sbiw	r24, 0x01	; 1
		{
		BCM_DISPATCHER_RX();
		}		
		else 
		{
			for(i=0;i<13;i++)
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	ff ef       	ldi	r31, 0xFF	; 255
 218:	29 e6       	ldi	r18, 0x69	; 105
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	f1 50       	subi	r31, 0x01	; 1
 21e:	20 40       	sbci	r18, 0x00	; 0
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x9c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0xa6>
 226:	00 00       	nop
 228:	e7 cf       	rjmp	.-50     	; 0x1f8 <main+0x78>

0000022a <__vector_14>:
	/*SET_BIT(PORTB,5) ;
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
	UDR = data;
	SET_BIT(PORTB,6) ;*/
	return ERROR_OK ;
}
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gu8_DataTransmit>
 240:	8c b9       	out	0x0c, r24	; 12
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8a bb       	out	0x1a, r24	; 26
 246:	87 bb       	out	0x17, r24	; 23
 248:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <BCM_State>
 24c:	8b bb       	out	0x1b, r24	; 27
 24e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 252:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 256:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <Data_Length_BCM>
 25a:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <Data_Length_BCM+0x1>
 25e:	82 17       	cp	r24, r18
 260:	93 07       	cpc	r25, r19
 262:	6c f4       	brge	.+26     	; 0x27e <__vector_14+0x54>
 264:	22 e0       	ldi	r18, 0x02	; 2
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <BCM_State+0x1>
 26c:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <BCM_State>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 276:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	06 c0       	rjmp	.+12     	; 0x28a <__vector_14+0x60>
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <BCM_State+0x1>
 286:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <BCM_State>
 28a:	55 98       	cbi	0x0a, 5	; 10
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_13>:
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	8c b1       	in	r24, 0x0c	; 12
 2b2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu8_DataReceive>
 2b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i_count_RX>
 2ba:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <i_count_RX+0x1>
 2be:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <REC_Length>
 2c2:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <REC_Length+0x1>
 2c6:	82 17       	cp	r24, r18
 2c8:	93 07       	cpc	r25, r19
 2ca:	2c f4       	brge	.+10     	; 0x2d6 <__vector_13+0x38>
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <i_count_RX+0x1>
 2d2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <i_count_RX>
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <UART_init>:
 2e8:	fc 01       	movw	r30, r24
 2ea:	54 9a       	sbi	0x0a, 4	; 10
 2ec:	53 9a       	sbi	0x0a, 3	; 10
 2ee:	80 b5       	in	r24, 0x20	; 32
 2f0:	8f 77       	andi	r24, 0x7F	; 127
 2f2:	80 bd       	out	0x20, r24	; 32
 2f4:	80 81       	ld	r24, Z
 2f6:	88 23       	and	r24, r24
 2f8:	19 f0       	breq	.+6      	; 0x300 <UART_init+0x18>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	39 f0       	breq	.+14     	; 0x30c <UART_init+0x24>
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <UART_init+0x30>
 300:	59 98       	cbi	0x0b, 1	; 11
 302:	10 bc       	out	0x20, r1	; 32
 304:	83 e3       	ldi	r24, 0x33	; 51
 306:	89 b9       	out	0x09, r24	; 9
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	07 c0       	rjmp	.+14     	; 0x31a <UART_init+0x32>
 30c:	59 9a       	sbi	0x0b, 1	; 11
 30e:	10 bc       	out	0x20, r1	; 32
 310:	87 e6       	ldi	r24, 0x67	; 103
 312:	89 b9       	out	0x09, r24	; 9
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	01 c0       	rjmp	.+2      	; 0x31a <UART_init+0x32>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 b5       	in	r25, 0x20	; 32
 31c:	90 68       	ori	r25, 0x80	; 128
 31e:	90 bd       	out	0x20, r25	; 32
 320:	93 81       	ldd	r25, Z+3	; 0x03
 322:	99 23       	and	r25, r25
 324:	19 f0       	breq	.+6      	; 0x32c <UART_init+0x44>
 326:	91 30       	cpi	r25, 0x01	; 1
 328:	29 f0       	breq	.+10     	; 0x334 <UART_init+0x4c>
 32a:	08 c0       	rjmp	.+16     	; 0x33c <UART_init+0x54>
 32c:	90 b5       	in	r25, 0x20	; 32
 32e:	90 64       	ori	r25, 0x40	; 64
 330:	90 bd       	out	0x20, r25	; 32
 332:	05 c0       	rjmp	.+10     	; 0x33e <UART_init+0x56>
 334:	90 b5       	in	r25, 0x20	; 32
 336:	9f 7b       	andi	r25, 0xBF	; 191
 338:	90 bd       	out	0x20, r25	; 32
 33a:	01 c0       	rjmp	.+2      	; 0x33e <UART_init+0x56>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	94 81       	ldd	r25, Z+4	; 0x04
 340:	97 30       	cpi	r25, 0x07	; 7
 342:	d9 f0       	breq	.+54     	; 0x37a <UART_init+0x92>
 344:	28 f4       	brcc	.+10     	; 0x350 <UART_init+0x68>
 346:	95 30       	cpi	r25, 0x05	; 5
 348:	41 f0       	breq	.+16     	; 0x35a <UART_init+0x72>
 34a:	96 30       	cpi	r25, 0x06	; 6
 34c:	71 f0       	breq	.+28     	; 0x36a <UART_init+0x82>
 34e:	2d c0       	rjmp	.+90     	; 0x3aa <UART_init+0xc2>
 350:	98 30       	cpi	r25, 0x08	; 8
 352:	d9 f0       	breq	.+54     	; 0x38a <UART_init+0xa2>
 354:	99 30       	cpi	r25, 0x09	; 9
 356:	09 f1       	breq	.+66     	; 0x39a <UART_init+0xb2>
 358:	28 c0       	rjmp	.+80     	; 0x3aa <UART_init+0xc2>
 35a:	90 b5       	in	r25, 0x20	; 32
 35c:	9d 7f       	andi	r25, 0xFD	; 253
 35e:	90 bd       	out	0x20, r25	; 32
 360:	90 b5       	in	r25, 0x20	; 32
 362:	9b 7f       	andi	r25, 0xFB	; 251
 364:	90 bd       	out	0x20, r25	; 32
 366:	52 98       	cbi	0x0a, 2	; 10
 368:	21 c0       	rjmp	.+66     	; 0x3ac <UART_init+0xc4>
 36a:	90 b5       	in	r25, 0x20	; 32
 36c:	92 60       	ori	r25, 0x02	; 2
 36e:	90 bd       	out	0x20, r25	; 32
 370:	90 b5       	in	r25, 0x20	; 32
 372:	9b 7f       	andi	r25, 0xFB	; 251
 374:	90 bd       	out	0x20, r25	; 32
 376:	52 98       	cbi	0x0a, 2	; 10
 378:	19 c0       	rjmp	.+50     	; 0x3ac <UART_init+0xc4>
 37a:	90 b5       	in	r25, 0x20	; 32
 37c:	9d 7f       	andi	r25, 0xFD	; 253
 37e:	90 bd       	out	0x20, r25	; 32
 380:	90 b5       	in	r25, 0x20	; 32
 382:	94 60       	ori	r25, 0x04	; 4
 384:	90 bd       	out	0x20, r25	; 32
 386:	52 98       	cbi	0x0a, 2	; 10
 388:	11 c0       	rjmp	.+34     	; 0x3ac <UART_init+0xc4>
 38a:	90 b5       	in	r25, 0x20	; 32
 38c:	92 60       	ori	r25, 0x02	; 2
 38e:	90 bd       	out	0x20, r25	; 32
 390:	90 b5       	in	r25, 0x20	; 32
 392:	94 60       	ori	r25, 0x04	; 4
 394:	90 bd       	out	0x20, r25	; 32
 396:	52 98       	cbi	0x0a, 2	; 10
 398:	09 c0       	rjmp	.+18     	; 0x3ac <UART_init+0xc4>
 39a:	90 b5       	in	r25, 0x20	; 32
 39c:	92 60       	ori	r25, 0x02	; 2
 39e:	90 bd       	out	0x20, r25	; 32
 3a0:	90 b5       	in	r25, 0x20	; 32
 3a2:	94 60       	ori	r25, 0x04	; 4
 3a4:	90 bd       	out	0x20, r25	; 32
 3a6:	52 9a       	sbi	0x0a, 2	; 10
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <UART_init+0xc4>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	95 81       	ldd	r25, Z+5	; 0x05
 3ae:	91 30       	cpi	r25, 0x01	; 1
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <UART_init+0xe0>
 3b2:	18 f0       	brcs	.+6      	; 0x3ba <UART_init+0xd2>
 3b4:	92 30       	cpi	r25, 0x02	; 2
 3b6:	79 f0       	breq	.+30     	; 0x3d6 <UART_init+0xee>
 3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <UART_init+0xfc>
 3ba:	90 b5       	in	r25, 0x20	; 32
 3bc:	9f 7d       	andi	r25, 0xDF	; 223
 3be:	90 bd       	out	0x20, r25	; 32
 3c0:	90 b5       	in	r25, 0x20	; 32
 3c2:	9f 7e       	andi	r25, 0xEF	; 239
 3c4:	90 bd       	out	0x20, r25	; 32
 3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <UART_init+0xfe>
 3c8:	90 b5       	in	r25, 0x20	; 32
 3ca:	90 62       	ori	r25, 0x20	; 32
 3cc:	90 bd       	out	0x20, r25	; 32
 3ce:	90 b5       	in	r25, 0x20	; 32
 3d0:	9f 7e       	andi	r25, 0xEF	; 239
 3d2:	90 bd       	out	0x20, r25	; 32
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <UART_init+0xfe>
 3d6:	90 b5       	in	r25, 0x20	; 32
 3d8:	90 62       	ori	r25, 0x20	; 32
 3da:	90 bd       	out	0x20, r25	; 32
 3dc:	90 b5       	in	r25, 0x20	; 32
 3de:	90 61       	ori	r25, 0x10	; 16
 3e0:	90 bd       	out	0x20, r25	; 32
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <UART_init+0xfe>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	96 81       	ldd	r25, Z+6	; 0x06
 3e8:	99 23       	and	r25, r25
 3ea:	19 f0       	breq	.+6      	; 0x3f2 <UART_init+0x10a>
 3ec:	91 30       	cpi	r25, 0x01	; 1
 3ee:	29 f0       	breq	.+10     	; 0x3fa <UART_init+0x112>
 3f0:	08 c0       	rjmp	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f2:	90 b5       	in	r25, 0x20	; 32
 3f4:	98 60       	ori	r25, 0x08	; 8
 3f6:	90 bd       	out	0x20, r25	; 32
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fa:	90 b5       	in	r25, 0x20	; 32
 3fc:	97 7f       	andi	r25, 0xF7	; 247
 3fe:	90 bd       	out	0x20, r25	; 32
 400:	01 c0       	rjmp	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	97 81       	ldd	r25, Z+7	; 0x07
 406:	99 23       	and	r25, r25
 408:	19 f0       	breq	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	91 30       	cpi	r25, 0x01	; 1
 40c:	29 f0       	breq	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	08 c0       	rjmp	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 410:	9f b7       	in	r25, 0x3f	; 63
 412:	90 68       	ori	r25, 0x80	; 128
 414:	9f bf       	out	0x3f, r25	; 63
 416:	08 95       	ret
 418:	9f b7       	in	r25, 0x3f	; 63
 41a:	9f 77       	andi	r25, 0x7F	; 127
 41c:	9f bf       	out	0x3f, r25	; 63
 41e:	08 95       	ret
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret

00000424 <UART_recieveByte>:

UART_ERROR UART_recieveByte(uint8_t *pu8_Received_Data)
{
	/***********Receiving on Inerrupt Mode*********/
	SET_BIT(UCSRB,RXCIE) ;
 424:	57 9a       	sbi	0x0a, 7	; 10
	*pu8_Received_Data = gu8_DataReceive;
 426:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <gu8_DataReceive>
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
	/***********Polling on Mode*********************/
	/*SET_BIT(PORTB,4) ;
	while(BIT_IS_CLEAR(UCSRA,RXC)){}	 
    return UDR;	*/	
   return ERROR_OK;
}
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
