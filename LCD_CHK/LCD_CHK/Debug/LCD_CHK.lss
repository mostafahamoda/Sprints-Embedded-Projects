
LCD_CHK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000978  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f6  00000000  00000000  000012f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000341  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	_delay_ms(4) ;
}*/

int main(void)
{
	LCD_vInit() ;
  82:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_vInit>
	//LCD_vPrintchar('A') ;
	char * ptr = "hussam lovers <3" ;
	LCD_vPrintstring(ptr) ;
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_vPrintstring>
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0xc>

00000090 <sendfallingedge>:
 
 #elif defined LCD_4
 
 void sendfallingedge(void)
 {
	 SET_BIT(PORTA,EN) ;
  90:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e3       	ldi	r24, 0x3F	; 63
  94:	9f e1       	ldi	r25, 0x1F	; 31
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <sendfallingedge+0x6>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <sendfallingedge+0xc>
  9c:	00 00       	nop
	 _delay_ms(4) ;
	 CLR_BIT(PORTA,EN) ;
  9e:	db 98       	cbi	0x1b, 3	; 27
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9f e1       	ldi	r25, 0x1F	; 31
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <sendfallingedge+0x14>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <sendfallingedge+0x1a>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <LCD_vSendCmd>:
	 _delay_ms(4) ;
 }
  void LCD_vSendCmd(char cmd)
{
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
	CLR_BIT(PORTA,RS) ;
  b2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= 0x0f  ;
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	8b bb       	out	0x1b, r24	; 27
	PORTA |= cmd&0xf0 ;
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	9c 2f       	mov	r25, r28
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	89 2b       	or	r24, r25
  c2:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
  c4:	0e 94 48 00 	call	0x90	; 0x90 <sendfallingedge>
	PORTA &= 0x0f ;
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (cmd<<4) ;
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	30 e1       	ldi	r19, 0x10	; 16
  d2:	c3 9f       	mul	r28, r19
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	82 2b       	or	r24, r18
  da:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
  dc:	0e 94 48 00 	call	0x90	; 0x90 <sendfallingedge>
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_vInit>:

  void LCD_vInit(void)
{
	DDRA = 0xF0 ;
  e4:	80 ef       	ldi	r24, 0xF0	; 240
  e6:	8a bb       	out	0x1a, r24	; 26
	DDRA |= 0x0E ;
  e8:	8a b3       	in	r24, 0x1a	; 26
  ea:	8e 60       	ori	r24, 0x0E	; 14
  ec:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(PORTA,RW) ;
  ee:	da 98       	cbi	0x1b, 2	; 27
	LCD_vSendCmd(0x33) ;
  f0:	83 e3       	ldi	r24, 0x33	; 51
  f2:	0e 94 57 00 	call	0xae	; 0xae <LCD_vSendCmd>
	LCD_vSendCmd(0x32) ;
  f6:	82 e3       	ldi	r24, 0x32	; 50
  f8:	0e 94 57 00 	call	0xae	; 0xae <LCD_vSendCmd>
	LCD_vSendCmd(0x28) ;
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 57 00 	call	0xae	; 0xae <LCD_vSendCmd>
	// blink cursor
	LCD_vSendCmd(0x0F) ;
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	0e 94 57 00 	call	0xae	; 0xae <LCD_vSendCmd>
	// clear screen
	LCD_vSendCmd(0x01) ;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 57 00 	call	0xae	; 0xae <LCD_vSendCmd>
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9c e9       	ldi	r25, 0x9C	; 156
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_vInit+0x2e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_vInit+0x34>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LCD_vPrintchar>:
	_delay_ms(20) ;
}
  void LCD_vPrintchar(char data)
{
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
	SET_BIT(PORTA,RS) ;
 120:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA &= 0x0f  ;
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	8b bb       	out	0x1b, r24	; 27
	PORTA |= data&0xf0 ;
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	9c 2f       	mov	r25, r28
 12c:	90 7f       	andi	r25, 0xF0	; 240
 12e:	89 2b       	or	r24, r25
 130:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
 132:	0e 94 48 00 	call	0x90	; 0x90 <sendfallingedge>
	PORTA &= 0x0f ;
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (data<<4) ;
 13c:	2b b3       	in	r18, 0x1b	; 27
 13e:	30 e1       	ldi	r19, 0x10	; 16
 140:	c3 9f       	mul	r28, r19
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	82 2b       	or	r24, r18
 148:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
 14a:	0e 94 48 00 	call	0x90	; 0x90 <sendfallingedge>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_vPrintstring>:
  void LCD_vPrintstring(char * ptr)
 {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	fc 01       	movw	r30, r24
	 uint8 i ;
	 char fu ;
	 for(i=0;;i++)
	 {
		 
		 fu = *(ptr+i) ;
 15a:	80 81       	ld	r24, Z
		 if(fu!='\0')
 15c:	88 23       	and	r24, r24
 15e:	59 f0       	breq	.+22     	; 0x176 <LCD_vPrintstring+0x24>
 160:	8f 01       	movw	r16, r30
 162:	c0 e0       	ldi	r28, 0x00	; 0
		 {
			 LCD_vPrintchar(fu) ;
 164:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_vPrintchar>
}
  void LCD_vPrintstring(char * ptr)
 {
	 uint8 i ;
	 char fu ;
	 for(i=0;;i++)
 168:	cf 5f       	subi	r28, 0xFF	; 255
	 {
		 
		 fu = *(ptr+i) ;
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	f1 1d       	adc	r31, r1
 170:	80 81       	ld	r24, Z
		 if(fu!='\0')
 172:	81 11       	cpse	r24, r1
 174:	f7 cf       	rjmp	.-18     	; 0x164 <LCD_vPrintstring+0x12>
		 {
			 break ;
		 }
		 
	 }
 }
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
