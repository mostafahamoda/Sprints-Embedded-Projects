
UART_AA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000598  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051b  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f6  00000000  00000000  00000d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ed  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define BAUD_PRECALE ((F_CPU/(USART_BAUDRATE * 16UL)) - 1)

int main(void)
{
    /* Replace with your application code */
	UCSRB = (1<<TXEN) ;
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL) ;
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
	UBRRH = BAUD_PRECALE>>8 ;
  8a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	c9 01       	movw	r24, r18
  94:	33 0f       	add	r19, r19
  96:	aa 0b       	sbc	r26, r26
  98:	bb 0b       	sbc	r27, r27
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	aa 1f       	adc	r26, r26
  a0:	bb 1f       	adc	r27, r27
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	9c 01       	movw	r18, r24
  ac:	ad 01       	movw	r20, r26
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	44 1f       	adc	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	0f 2e       	mov	r0, r31
  c0:	c1 2c       	mov	r12, r1
  c2:	f2 e1       	ldi	r31, 0x12	; 18
  c4:	df 2e       	mov	r13, r31
  c6:	fa e7       	ldi	r31, 0x7A	; 122
  c8:	ef 2e       	mov	r14, r31
  ca:	f1 2c       	mov	r15, r1
  cc:	f0 2d       	mov	r31, r0
  ce:	c7 01       	movw	r24, r14
  d0:	b6 01       	movw	r22, r12
  d2:	0e 94 9f 00 	call	0x13e	; 0x13e <__udivmodsi4>
  d6:	da 01       	movw	r26, r20
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	a1 09       	sbc	r26, r1
  de:	b1 09       	sbc	r27, r1
  e0:	89 2f       	mov	r24, r25
  e2:	9a 2f       	mov	r25, r26
  e4:	ab 2f       	mov	r26, r27
  e6:	bb 27       	eor	r27, r27
  e8:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRECALE ;
  ea:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	c9 01       	movw	r24, r18
  f4:	33 0f       	add	r19, r19
  f6:	aa 0b       	sbc	r26, r26
  f8:	bb 0b       	sbc	r27, r27
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	aa 1f       	adc	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	9c 01       	movw	r18, r24
 10c:	ad 01       	movw	r20, r26
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	44 1f       	adc	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	0e 94 9f 00 	call	0x13e	; 0x13e <__udivmodsi4>
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	82 0f       	add	r24, r18
 12a:	89 b9       	out	0x09, r24	; 9
	DDRB = 0xFF ;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	87 bb       	out	0x17, r24	; 23
    {
		PORTB |= (1<<4) ;
		while (!(UCSRA & (1<<UDRE)))
		{
		}
		UDR = 'A' ;
 130:	81 e4       	ldi	r24, 0x41	; 65
	UBRRL = BAUD_PRECALE ;
	DDRB = 0xFF ;
	char Data  = 'A';
    while (1) 
    {
		PORTB |= (1<<4) ;
 132:	c4 9a       	sbi	0x18, 4	; 24
		while (!(UCSRA & (1<<UDRE)))
 134:	5d 9b       	sbis	0x0b, 5	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0xb2>
		{
		}
		UDR = 'A' ;
 138:	8c b9       	out	0x0c, r24	; 12
		PORTB |= (1<<5) ;
 13a:	c5 9a       	sbi	0x18, 5	; 24
		/*
		while(!(UCSRA & (1<<RXC))){}
		PORTB = (1<<5);*/
    }
 13c:	fa cf       	rjmp	.-12     	; 0x132 <main+0xb0>

0000013e <__udivmodsi4>:
 13e:	a1 e2       	ldi	r26, 0x21	; 33
 140:	1a 2e       	mov	r1, r26
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	fd 01       	movw	r30, r26
 148:	0d c0       	rjmp	.+26     	; 0x164 <__udivmodsi4_ep>

0000014a <__udivmodsi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	ee 1f       	adc	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	a2 17       	cp	r26, r18
 154:	b3 07       	cpc	r27, r19
 156:	e4 07       	cpc	r30, r20
 158:	f5 07       	cpc	r31, r21
 15a:	20 f0       	brcs	.+8      	; 0x164 <__udivmodsi4_ep>
 15c:	a2 1b       	sub	r26, r18
 15e:	b3 0b       	sbc	r27, r19
 160:	e4 0b       	sbc	r30, r20
 162:	f5 0b       	sbc	r31, r21

00000164 <__udivmodsi4_ep>:
 164:	66 1f       	adc	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	88 1f       	adc	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	1a 94       	dec	r1
 16e:	69 f7       	brne	.-38     	; 0x14a <__udivmodsi4_loop>
 170:	60 95       	com	r22
 172:	70 95       	com	r23
 174:	80 95       	com	r24
 176:	90 95       	com	r25
 178:	9b 01       	movw	r18, r22
 17a:	ac 01       	movw	r20, r24
 17c:	bd 01       	movw	r22, r26
 17e:	cf 01       	movw	r24, r30
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
