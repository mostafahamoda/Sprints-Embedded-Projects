
TMU_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001aba  00001b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800064  00800064  00001b52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001045  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000920  00000000  00000000  00002cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d35  00000000  00000000  0000361d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00004354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000046b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f0  00000000  00000000  00004ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 02 	call	0x522	; 0x522 <main>
      8a:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendfallingedge>:
 }
 
 #elif defined LCD_4
 
 void sendfallingedge(void)
 {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	6c 97       	sbiw	r28, 0x1c	; 28
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	 SET_BIT(PORTA,EN) ;
      a6:	8b e3       	ldi	r24, 0x3B	; 59
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	2b e3       	ldi	r18, 0x3B	; 59
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	f9 01       	movw	r30, r18
      b0:	20 81       	ld	r18, Z
      b2:	28 60       	ori	r18, 0x08	; 8
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	a0 e8       	ldi	r26, 0x80	; 128
      be:	b0 e4       	ldi	r27, 0x40	; 64
      c0:	89 83       	std	Y+1, r24	; 0x01
      c2:	9a 83       	std	Y+2, r25	; 0x02
      c4:	ab 83       	std	Y+3, r26	; 0x03
      c6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	4a ef       	ldi	r20, 0xFA	; 250
      ce:	54 e4       	ldi	r21, 0x44	; 68
      d0:	69 81       	ldd	r22, Y+1	; 0x01
      d2:	7a 81       	ldd	r23, Y+2	; 0x02
      d4:	8b 81       	ldd	r24, Y+3	; 0x03
      d6:	9c 81       	ldd	r25, Y+4	; 0x04
      d8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__mulsf3>
      dc:	dc 01       	movw	r26, r24
      de:	cb 01       	movw	r24, r22
      e0:	8b 8b       	std	Y+19, r24	; 0x13
      e2:	9c 8b       	std	Y+20, r25	; 0x14
      e4:	ad 8b       	std	Y+21, r26	; 0x15
      e6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	40 e8       	ldi	r20, 0x80	; 128
      ee:	5f e3       	ldi	r21, 0x3F	; 63
      f0:	6b 89       	ldd	r22, Y+19	; 0x13
      f2:	7c 89       	ldd	r23, Y+20	; 0x14
      f4:	8d 89       	ldd	r24, Y+21	; 0x15
      f6:	9e 89       	ldd	r25, Y+22	; 0x16
      f8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__cmpsf2>
      fc:	88 23       	and	r24, r24
      fe:	2c f4       	brge	.+10     	; 0x10a <sendfallingedge+0x78>
		__ticks = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	98 8f       	std	Y+24, r25	; 0x18
     106:	8f 8b       	std	Y+23, r24	; 0x17
     108:	3f c0       	rjmp	.+126    	; 0x188 <sendfallingedge+0xf6>
	else if (__tmp > 65535)
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	3f ef       	ldi	r19, 0xFF	; 255
     10e:	4f e7       	ldi	r20, 0x7F	; 127
     110:	57 e4       	ldi	r21, 0x47	; 71
     112:	6b 89       	ldd	r22, Y+19	; 0x13
     114:	7c 89       	ldd	r23, Y+20	; 0x14
     116:	8d 89       	ldd	r24, Y+21	; 0x15
     118:	9e 89       	ldd	r25, Y+22	; 0x16
     11a:	0e 94 ad 0c 	call	0x195a	; 0x195a <__gesf2>
     11e:	18 16       	cp	r1, r24
     120:	4c f5       	brge	.+82     	; 0x174 <sendfallingedge+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e2       	ldi	r20, 0x20	; 32
     128:	51 e4       	ldi	r21, 0x41	; 65
     12a:	69 81       	ldd	r22, Y+1	; 0x01
     12c:	7a 81       	ldd	r23, Y+2	; 0x02
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	9c 81       	ldd	r25, Y+4	; 0x04
     132:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__mulsf3>
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	bc 01       	movw	r22, r24
     13c:	cd 01       	movw	r24, r26
     13e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     142:	dc 01       	movw	r26, r24
     144:	cb 01       	movw	r24, r22
     146:	98 8f       	std	Y+24, r25	; 0x18
     148:	8f 8b       	std	Y+23, r24	; 0x17
     14a:	0f c0       	rjmp	.+30     	; 0x16a <sendfallingedge+0xd8>
     14c:	88 ec       	ldi	r24, 0xC8	; 200
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	9a 8f       	std	Y+26, r25	; 0x1a
     152:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     154:	89 8d       	ldd	r24, Y+25	; 0x19
     156:	9a 8d       	ldd	r25, Y+26	; 0x1a
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <sendfallingedge+0xc6>
     15c:	9a 8f       	std	Y+26, r25	; 0x1a
     15e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     160:	8f 89       	ldd	r24, Y+23	; 0x17
     162:	98 8d       	ldd	r25, Y+24	; 0x18
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	98 8f       	std	Y+24, r25	; 0x18
     168:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     16a:	8f 89       	ldd	r24, Y+23	; 0x17
     16c:	98 8d       	ldd	r25, Y+24	; 0x18
     16e:	89 2b       	or	r24, r25
     170:	69 f7       	brne	.-38     	; 0x14c <sendfallingedge+0xba>
     172:	14 c0       	rjmp	.+40     	; 0x19c <sendfallingedge+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     174:	6b 89       	ldd	r22, Y+19	; 0x13
     176:	7c 89       	ldd	r23, Y+20	; 0x14
     178:	8d 89       	ldd	r24, Y+21	; 0x15
     17a:	9e 89       	ldd	r25, Y+22	; 0x16
     17c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	98 8f       	std	Y+24, r25	; 0x18
     186:	8f 8b       	std	Y+23, r24	; 0x17
     188:	8f 89       	ldd	r24, Y+23	; 0x17
     18a:	98 8d       	ldd	r25, Y+24	; 0x18
     18c:	9c 8f       	std	Y+28, r25	; 0x1c
     18e:	8b 8f       	std	Y+27, r24	; 0x1b
     190:	8b 8d       	ldd	r24, Y+27	; 0x1b
     192:	9c 8d       	ldd	r25, Y+28	; 0x1c
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <sendfallingedge+0x102>
     198:	9c 8f       	std	Y+28, r25	; 0x1c
     19a:	8b 8f       	std	Y+27, r24	; 0x1b
	 _delay_ms(4) ;
	 CLR_BIT(PORTA,EN) ;
     19c:	8b e3       	ldi	r24, 0x3B	; 59
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2b e3       	ldi	r18, 0x3B	; 59
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	27 7f       	andi	r18, 0xF7	; 247
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	a0 e8       	ldi	r26, 0x80	; 128
     1b4:	b0 e4       	ldi	r27, 0x40	; 64
     1b6:	8d 83       	std	Y+5, r24	; 0x05
     1b8:	9e 83       	std	Y+6, r25	; 0x06
     1ba:	af 83       	std	Y+7, r26	; 0x07
     1bc:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	4a ef       	ldi	r20, 0xFA	; 250
     1c4:	54 e4       	ldi	r21, 0x44	; 68
     1c6:	6d 81       	ldd	r22, Y+5	; 0x05
     1c8:	7e 81       	ldd	r23, Y+6	; 0x06
     1ca:	8f 81       	ldd	r24, Y+7	; 0x07
     1cc:	98 85       	ldd	r25, Y+8	; 0x08
     1ce:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__mulsf3>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	89 87       	std	Y+9, r24	; 0x09
     1d8:	9a 87       	std	Y+10, r25	; 0x0a
     1da:	ab 87       	std	Y+11, r26	; 0x0b
     1dc:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e8       	ldi	r20, 0x80	; 128
     1e4:	5f e3       	ldi	r21, 0x3F	; 63
     1e6:	69 85       	ldd	r22, Y+9	; 0x09
     1e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     1ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ee:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__cmpsf2>
     1f2:	88 23       	and	r24, r24
     1f4:	2c f4       	brge	.+10     	; 0x200 <sendfallingedge+0x16e>
		__ticks = 1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	9e 87       	std	Y+14, r25	; 0x0e
     1fc:	8d 87       	std	Y+13, r24	; 0x0d
     1fe:	3f c0       	rjmp	.+126    	; 0x27e <sendfallingedge+0x1ec>
	else if (__tmp > 65535)
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	3f ef       	ldi	r19, 0xFF	; 255
     204:	4f e7       	ldi	r20, 0x7F	; 127
     206:	57 e4       	ldi	r21, 0x47	; 71
     208:	69 85       	ldd	r22, Y+9	; 0x09
     20a:	7a 85       	ldd	r23, Y+10	; 0x0a
     20c:	8b 85       	ldd	r24, Y+11	; 0x0b
     20e:	9c 85       	ldd	r25, Y+12	; 0x0c
     210:	0e 94 ad 0c 	call	0x195a	; 0x195a <__gesf2>
     214:	18 16       	cp	r1, r24
     216:	4c f5       	brge	.+82     	; 0x26a <sendfallingedge+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e2       	ldi	r20, 0x20	; 32
     21e:	51 e4       	ldi	r21, 0x41	; 65
     220:	6d 81       	ldd	r22, Y+5	; 0x05
     222:	7e 81       	ldd	r23, Y+6	; 0x06
     224:	8f 81       	ldd	r24, Y+7	; 0x07
     226:	98 85       	ldd	r25, Y+8	; 0x08
     228:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__mulsf3>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	bc 01       	movw	r22, r24
     232:	cd 01       	movw	r24, r26
     234:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     238:	dc 01       	movw	r26, r24
     23a:	cb 01       	movw	r24, r22
     23c:	9e 87       	std	Y+14, r25	; 0x0e
     23e:	8d 87       	std	Y+13, r24	; 0x0d
     240:	0f c0       	rjmp	.+30     	; 0x260 <sendfallingedge+0x1ce>
     242:	88 ec       	ldi	r24, 0xC8	; 200
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	98 8b       	std	Y+16, r25	; 0x10
     248:	8f 87       	std	Y+15, r24	; 0x0f
     24a:	8f 85       	ldd	r24, Y+15	; 0x0f
     24c:	98 89       	ldd	r25, Y+16	; 0x10
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <sendfallingedge+0x1bc>
     252:	98 8b       	std	Y+16, r25	; 0x10
     254:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     256:	8d 85       	ldd	r24, Y+13	; 0x0d
     258:	9e 85       	ldd	r25, Y+14	; 0x0e
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	9e 87       	std	Y+14, r25	; 0x0e
     25e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     260:	8d 85       	ldd	r24, Y+13	; 0x0d
     262:	9e 85       	ldd	r25, Y+14	; 0x0e
     264:	89 2b       	or	r24, r25
     266:	69 f7       	brne	.-38     	; 0x242 <sendfallingedge+0x1b0>
	 _delay_ms(4) ;
 }
     268:	14 c0       	rjmp	.+40     	; 0x292 <sendfallingedge+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     26a:	69 85       	ldd	r22, Y+9	; 0x09
     26c:	7a 85       	ldd	r23, Y+10	; 0x0a
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	9e 87       	std	Y+14, r25	; 0x0e
     27c:	8d 87       	std	Y+13, r24	; 0x0d
     27e:	8d 85       	ldd	r24, Y+13	; 0x0d
     280:	9e 85       	ldd	r25, Y+14	; 0x0e
     282:	9a 8b       	std	Y+18, r25	; 0x12
     284:	89 8b       	std	Y+17, r24	; 0x11
     286:	89 89       	ldd	r24, Y+17	; 0x11
     288:	9a 89       	ldd	r25, Y+18	; 0x12
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <sendfallingedge+0x1f8>
     28e:	9a 8b       	std	Y+18, r25	; 0x12
     290:	89 8b       	std	Y+17, r24	; 0x11
     292:	00 00       	nop
     294:	6c 96       	adiw	r28, 0x1c	; 28
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <LCD_vSendCmd>:
  void LCD_vSendCmd(char cmd)
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(PORTA,RS) ;
     2b2:	8b e3       	ldi	r24, 0x3B	; 59
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	2b e3       	ldi	r18, 0x3B	; 59
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	2d 7f       	andi	r18, 0xFD	; 253
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 83       	st	Z, r18
	PORTA &= 0x0f  ;
     2c4:	8b e3       	ldi	r24, 0x3B	; 59
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2b e3       	ldi	r18, 0x3B	; 59
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	2f 70       	andi	r18, 0x0F	; 15
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
	PORTA |= cmd&0xf0 ;
     2d6:	8b e3       	ldi	r24, 0x3B	; 59
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	2b e3       	ldi	r18, 0x3B	; 59
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	32 2f       	mov	r19, r18
     2e4:	29 81       	ldd	r18, Y+1	; 0x01
     2e6:	20 7f       	andi	r18, 0xF0	; 240
     2e8:	23 2b       	or	r18, r19
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	sendfallingedge() ;
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <sendfallingedge>
	PORTA &= 0x0f ;
     2f2:	8b e3       	ldi	r24, 0x3B	; 59
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2b e3       	ldi	r18, 0x3B	; 59
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	20 81       	ld	r18, Z
     2fe:	2f 70       	andi	r18, 0x0F	; 15
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18
	PORTA |= (cmd<<4) ;
     304:	8b e3       	ldi	r24, 0x3B	; 59
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	2b e3       	ldi	r18, 0x3B	; 59
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	f9 01       	movw	r30, r18
     30e:	20 81       	ld	r18, Z
     310:	42 2f       	mov	r20, r18
     312:	29 81       	ldd	r18, Y+1	; 0x01
     314:	22 2f       	mov	r18, r18
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	22 95       	swap	r18
     31a:	32 95       	swap	r19
     31c:	30 7f       	andi	r19, 0xF0	; 240
     31e:	32 27       	eor	r19, r18
     320:	20 7f       	andi	r18, 0xF0	; 240
     322:	32 27       	eor	r19, r18
     324:	24 2b       	or	r18, r20
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
	sendfallingedge() ;
     32a:	0e 94 49 00 	call	0x92	; 0x92 <sendfallingedge>
}
     32e:	00 00       	nop
     330:	0f 90       	pop	r0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <LCD_vInit>:

  void LCD_vInit(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	2e 97       	sbiw	r28, 0x0e	; 14
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xF0 ;
     34c:	8a e3       	ldi	r24, 0x3A	; 58
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	20 ef       	ldi	r18, 0xF0	; 240
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
	DDRA |= 0x0E ;
     356:	8a e3       	ldi	r24, 0x3A	; 58
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2a e3       	ldi	r18, 0x3A	; 58
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	f9 01       	movw	r30, r18
     360:	20 81       	ld	r18, Z
     362:	2e 60       	ori	r18, 0x0E	; 14
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
	CLR_BIT(PORTA,RW) ;
     368:	8b e3       	ldi	r24, 0x3B	; 59
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	2b e3       	ldi	r18, 0x3B	; 59
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	20 81       	ld	r18, Z
     374:	2b 7f       	andi	r18, 0xFB	; 251
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
	LCD_vSendCmd(0x33) ;
     37a:	83 e3       	ldi	r24, 0x33	; 51
     37c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSendCmd>
	LCD_vSendCmd(0x32) ;
     380:	82 e3       	ldi	r24, 0x32	; 50
     382:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSendCmd>
	LCD_vSendCmd(0x28) ;
     386:	88 e2       	ldi	r24, 0x28	; 40
     388:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSendCmd>
	// blink cursor
	LCD_vSendCmd(0x0F) ;
     38c:	8f e0       	ldi	r24, 0x0F	; 15
     38e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSendCmd>
	// clear screen
	LCD_vSendCmd(0x01) ;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSendCmd>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	a0 ea       	ldi	r26, 0xA0	; 160
     39e:	b1 e4       	ldi	r27, 0x41	; 65
     3a0:	89 83       	std	Y+1, r24	; 0x01
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	ab 83       	std	Y+3, r26	; 0x03
     3a6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	4a ef       	ldi	r20, 0xFA	; 250
     3ae:	54 e4       	ldi	r21, 0x44	; 68
     3b0:	69 81       	ldd	r22, Y+1	; 0x01
     3b2:	7a 81       	ldd	r23, Y+2	; 0x02
     3b4:	8b 81       	ldd	r24, Y+3	; 0x03
     3b6:	9c 81       	ldd	r25, Y+4	; 0x04
     3b8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__mulsf3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	9e 83       	std	Y+6, r25	; 0x06
     3c4:	af 83       	std	Y+7, r26	; 0x07
     3c6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	40 e8       	ldi	r20, 0x80	; 128
     3ce:	5f e3       	ldi	r21, 0x3F	; 63
     3d0:	6d 81       	ldd	r22, Y+5	; 0x05
     3d2:	7e 81       	ldd	r23, Y+6	; 0x06
     3d4:	8f 81       	ldd	r24, Y+7	; 0x07
     3d6:	98 85       	ldd	r25, Y+8	; 0x08
     3d8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	2c f4       	brge	.+10     	; 0x3ea <LCD_vInit+0xb2>
		__ticks = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9a 87       	std	Y+10, r25	; 0x0a
     3e6:	89 87       	std	Y+9, r24	; 0x09
     3e8:	3f c0       	rjmp	.+126    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	else if (__tmp > 65535)
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	4f e7       	ldi	r20, 0x7F	; 127
     3f0:	57 e4       	ldi	r21, 0x47	; 71
     3f2:	6d 81       	ldd	r22, Y+5	; 0x05
     3f4:	7e 81       	ldd	r23, Y+6	; 0x06
     3f6:	8f 81       	ldd	r24, Y+7	; 0x07
     3f8:	98 85       	ldd	r25, Y+8	; 0x08
     3fa:	0e 94 ad 0c 	call	0x195a	; 0x195a <__gesf2>
     3fe:	18 16       	cp	r1, r24
     400:	4c f5       	brge	.+82     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e2       	ldi	r20, 0x20	; 32
     408:	51 e4       	ldi	r21, 0x41	; 65
     40a:	69 81       	ldd	r22, Y+1	; 0x01
     40c:	7a 81       	ldd	r23, Y+2	; 0x02
     40e:	8b 81       	ldd	r24, Y+3	; 0x03
     410:	9c 81       	ldd	r25, Y+4	; 0x04
     412:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	bc 01       	movw	r22, r24
     41c:	cd 01       	movw	r24, r26
     41e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	9a 87       	std	Y+10, r25	; 0x0a
     428:	89 87       	std	Y+9, r24	; 0x09
     42a:	0f c0       	rjmp	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     42c:	88 ec       	ldi	r24, 0xC8	; 200
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9c 87       	std	Y+12, r25	; 0x0c
     432:	8b 87       	std	Y+11, r24	; 0x0b
     434:	8b 85       	ldd	r24, Y+11	; 0x0b
     436:	9c 85       	ldd	r25, Y+12	; 0x0c
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43c:	9c 87       	std	Y+12, r25	; 0x0c
     43e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     440:	89 85       	ldd	r24, Y+9	; 0x09
     442:	9a 85       	ldd	r25, Y+10	; 0x0a
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	9a 87       	std	Y+10, r25	; 0x0a
     448:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	9a 85       	ldd	r25, Y+10	; 0x0a
     44e:	89 2b       	or	r24, r25
     450:	69 f7       	brne	.-38     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	_delay_ms(20) ;
}
     452:	14 c0       	rjmp	.+40     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     454:	6d 81       	ldd	r22, Y+5	; 0x05
     456:	7e 81       	ldd	r23, Y+6	; 0x06
     458:	8f 81       	ldd	r24, Y+7	; 0x07
     45a:	98 85       	ldd	r25, Y+8	; 0x08
     45c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	9a 87       	std	Y+10, r25	; 0x0a
     466:	89 87       	std	Y+9, r24	; 0x09
     468:	89 85       	ldd	r24, Y+9	; 0x09
     46a:	9a 85       	ldd	r25, Y+10	; 0x0a
     46c:	9e 87       	std	Y+14, r25	; 0x0e
     46e:	8d 87       	std	Y+13, r24	; 0x0d
     470:	8d 85       	ldd	r24, Y+13	; 0x0d
     472:	9e 85       	ldd	r25, Y+14	; 0x0e
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     478:	9e 87       	std	Y+14, r25	; 0x0e
     47a:	8d 87       	std	Y+13, r24	; 0x0d
     47c:	00 00       	nop
     47e:	2e 96       	adiw	r28, 0x0e	; 14
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <LCD_vPrintchar>:
  void LCD_vPrintchar(char data)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	1f 92       	push	r1
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(PORTA,RS) ;
     49c:	8b e3       	ldi	r24, 0x3B	; 59
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	2b e3       	ldi	r18, 0x3B	; 59
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	22 60       	ori	r18, 0x02	; 2
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
	PORTA &= 0x0f  ;
     4ae:	8b e3       	ldi	r24, 0x3B	; 59
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	2b e3       	ldi	r18, 0x3B	; 59
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	f9 01       	movw	r30, r18
     4b8:	20 81       	ld	r18, Z
     4ba:	2f 70       	andi	r18, 0x0F	; 15
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
	PORTA |= data&0xf0 ;
     4c0:	8b e3       	ldi	r24, 0x3B	; 59
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	2b e3       	ldi	r18, 0x3B	; 59
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	f9 01       	movw	r30, r18
     4ca:	20 81       	ld	r18, Z
     4cc:	32 2f       	mov	r19, r18
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	20 7f       	andi	r18, 0xF0	; 240
     4d2:	23 2b       	or	r18, r19
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
	sendfallingedge() ;
     4d8:	0e 94 49 00 	call	0x92	; 0x92 <sendfallingedge>
	PORTA &= 0x0f ;
     4dc:	8b e3       	ldi	r24, 0x3B	; 59
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	2b e3       	ldi	r18, 0x3B	; 59
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	2f 70       	andi	r18, 0x0F	; 15
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
	PORTA |= (data<<4) ;
     4ee:	8b e3       	ldi	r24, 0x3B	; 59
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2b e3       	ldi	r18, 0x3B	; 59
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	42 2f       	mov	r20, r18
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	22 2f       	mov	r18, r18
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	22 95       	swap	r18
     504:	32 95       	swap	r19
     506:	30 7f       	andi	r19, 0xF0	; 240
     508:	32 27       	eor	r19, r18
     50a:	20 7f       	andi	r18, 0xF0	; 240
     50c:	32 27       	eor	r19, r18
     50e:	24 2b       	or	r18, r20
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	sendfallingedge() ;
     514:	0e 94 49 00 	call	0x92	; 0x92 <sendfallingedge>
}
     518:	00 00       	nop
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <main>:
#include "timer.h"
#include "LCD_head.h"
#include "TMU.h"
int f_ele = 0 ;
int main(void)
{
     522:	af 92       	push	r10
     524:	bf 92       	push	r11
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 d0       	rcall	.+0      	; 0x538 <main+0x16>
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
	sei() ;
     53c:	78 94       	sei
	DDRB = 0xFF ;
     53e:	87 e3       	ldi	r24, 0x37	; 55
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
	LCD_vInit() ;
     548:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_vInit>
	void (*ptr)(char)  = (&LCD_vPrintchar) ; 
     54c:	88 e4       	ldi	r24, 0x48	; 72
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	9a 83       	std	Y+2, r25	; 0x02
     552:	89 83       	std	Y+1, r24	; 0x01
	TMU_Init(0,1000) ;
     554:	48 ee       	ldi	r20, 0xE8	; 232
     556:	53 e0       	ldi	r21, 0x03	; 3
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <TMU_Init>
	TMU_Start(1,ptr,1,1,1) ;
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	9a 81       	ldd	r25, Y+2	; 0x02
     566:	a1 2c       	mov	r10, r1
     568:	b1 2c       	mov	r11, r1
     56a:	65 01       	movw	r12, r10
     56c:	a3 94       	inc	r10
     56e:	e1 2c       	mov	r14, r1
     570:	f1 2c       	mov	r15, r1
     572:	87 01       	movw	r16, r14
     574:	e3 94       	inc	r14
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	ac 01       	movw	r20, r24
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TMU_Start>
	TMU_Start(5,ptr,1,0,2) ;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	a1 2c       	mov	r10, r1
     58c:	b1 2c       	mov	r11, r1
     58e:	65 01       	movw	r12, r10
     590:	68 94       	set
     592:	a1 f8       	bld	r10, 1
     594:	e1 2c       	mov	r14, r1
     596:	f1 2c       	mov	r15, r1
     598:	87 01       	movw	r16, r14
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	ac 01       	movw	r20, r24
     59e:	65 e0       	ldi	r22, 0x05	; 5
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TMU_Start>
	//TMU_Start(10,ptr,0,1,2) ;
	/*Function for Writing on the LCD*/
    while(1)
    {
        //TODO:: Please write your application code 
		Dispatcher() ;
     5aa:	0e 94 36 0a 	call	0x146c	; 0x146c <Dispatcher>
		//_delay_ms(500);
    }
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <main+0x88>

000005b0 <__vector_11>:
{
	// Cutting the Source Clock
	CLEAR_BIT(TCCR0_Reg,CS02_Reg) ;
	CLEAR_BIT(TCCR0_Reg,CS01_Reg) ;
	CLEAR_BIT(TCCR0_Reg,CS00_Reg) ;
}
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5b8:	0f 92       	push	r0
     5ba:	11 24       	eor	r1, r1
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	2f 93       	push	r18
     5c6:	3f 93       	push	r19
     5c8:	4f 93       	push	r20
     5ca:	5f 93       	push	r21
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	af 93       	push	r26
     5d2:	bf 93       	push	r27
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     5e4:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     5e8:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     5ec:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     5f0:	89 2b       	or	r24, r25
     5f2:	8a 2b       	or	r24, r26
     5f4:	8b 2b       	or	r24, r27
     5f6:	09 f4       	brne	.+2      	; 0x5fa <__vector_11+0x4a>
     5f8:	66 c0       	rjmp	.+204    	; 0x6c6 <__vector_11+0x116>
     5fa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     5fe:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     602:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     606:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     60a:	8f 3f       	cpi	r24, 0xFF	; 255
     60c:	91 05       	cpc	r25, r1
     60e:	a1 05       	cpc	r26, r1
     610:	b1 05       	cpc	r27, r1
     612:	90 f5       	brcc	.+100    	; 0x678 <__vector_11+0xc8>
     614:	22 e5       	ldi	r18, 0x52	; 82
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     61c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     620:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     624:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     628:	80 95       	com	r24
     62a:	f9 01       	movw	r30, r18
     62c:	80 83       	st	Z, r24
     62e:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <Ticks>
     632:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <Ticks+0x1>
     636:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <Ticks+0x2>
     63a:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <Ticks+0x3>
     63e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     642:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     646:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     64a:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     64e:	79 01       	movw	r14, r18
     650:	8a 01       	movw	r16, r20
     652:	e8 1a       	sub	r14, r24
     654:	f9 0a       	sbc	r15, r25
     656:	0a 0b       	sbc	r16, r26
     658:	1b 0b       	sbc	r17, r27
     65a:	d8 01       	movw	r26, r16
     65c:	c7 01       	movw	r24, r14
     65e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     662:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     666:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     66a:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
     66e:	88 e3       	ldi	r24, 0x38	; 56
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	10 82       	st	Z, r1
     676:	5a c0       	rjmp	.+180    	; 0x72c <__vector_11+0x17c>
     678:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     67c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     680:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     684:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     688:	8f 3f       	cpi	r24, 0xFF	; 255
     68a:	91 05       	cpc	r25, r1
     68c:	a1 05       	cpc	r26, r1
     68e:	b1 05       	cpc	r27, r1
     690:	08 f4       	brcc	.+2      	; 0x694 <__vector_11+0xe4>
     692:	4c c0       	rjmp	.+152    	; 0x72c <__vector_11+0x17c>
     694:	82 e5       	ldi	r24, 0x52	; 82
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	10 82       	st	Z, r1
     69c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     6a0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     6a4:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     6a8:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	91 09       	sbc	r25, r1
     6b0:	a1 09       	sbc	r26, r1
     6b2:	b1 09       	sbc	r27, r1
     6b4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     6b8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     6bc:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     6c0:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
     6c4:	33 c0       	rjmp	.+102    	; 0x72c <__vector_11+0x17c>
     6c6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     6ca:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     6ce:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     6d2:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     6d6:	89 2b       	or	r24, r25
     6d8:	8a 2b       	or	r24, r26
     6da:	8b 2b       	or	r24, r27
     6dc:	39 f5       	brne	.+78     	; 0x72c <__vector_11+0x17c>
     6de:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Initial_ticks>
     6e2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Initial_ticks+0x1>
     6e6:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <Initial_ticks+0x2>
     6ea:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <Initial_ticks+0x3>
     6ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     6f2:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     6f6:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     6fa:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
     6fe:	82 e5       	ldi	r24, 0x52	; 82
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	10 82       	st	Z, r1
     706:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Ignite_Flag_Var>
     70a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Ignite_Flag_Var+0x1>
     70e:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <Ignite_Flag_Var+0x2>
     712:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <Ignite_Flag_Var+0x3>
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	a1 1d       	adc	r26, r1
     71a:	b1 1d       	adc	r27, r1
     71c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Ignite_Flag_Var>
     720:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Ignite_Flag_Var+0x1>
     724:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <Ignite_Flag_Var+0x2>
     728:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <Ignite_Flag_Var+0x3>
     72c:	00 00       	nop
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	5f 91       	pop	r21
     740:	4f 91       	pop	r20
     742:	3f 91       	pop	r19
     744:	2f 91       	pop	r18
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	0f 90       	pop	r0
     750:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <Timer_Stop_1>:
void Timer_Stop_1(void)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
	// Cutting the Source Clock
	CLEAR_BIT(TCCR1B_Reg,CS12_Reg) ;
     762:	8e e4       	ldi	r24, 0x4E	; 78
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	2e e4       	ldi	r18, 0x4E	; 78
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	2b 7f       	andi	r18, 0xFB	; 251
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B_Reg,CS11_Reg) ;
     774:	8e e4       	ldi	r24, 0x4E	; 78
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	2e e4       	ldi	r18, 0x4E	; 78
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	f9 01       	movw	r30, r18
     77e:	20 81       	ld	r18, Z
     780:	2d 7f       	andi	r18, 0xFD	; 253
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B_Reg,CS10_Reg) ;
     786:	8e e4       	ldi	r24, 0x4E	; 78
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2e e4       	ldi	r18, 0x4E	; 78
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	2e 7f       	andi	r18, 0xFE	; 254
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
}
     798:	00 00       	nop
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <Timer_Stop_2>:
void Timer_Stop_2(void)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
	// Cutting the Source Clock
	CLEAR_BIT(TCCR2_Reg,CS22_Reg) ;
     7a8:	85 e4       	ldi	r24, 0x45	; 69
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	25 e4       	ldi	r18, 0x45	; 69
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	2b 7f       	andi	r18, 0xFB	; 251
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR2_Reg,CS21_Reg) ;
     7ba:	85 e4       	ldi	r24, 0x45	; 69
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	25 e4       	ldi	r18, 0x45	; 69
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	20 81       	ld	r18, Z
     7c6:	2d 7f       	andi	r18, 0xFD	; 253
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR2_Reg,CS20_Reg) ;
     7cc:	85 e4       	ldi	r24, 0x45	; 69
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	25 e4       	ldi	r18, 0x45	; 69
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	f9 01       	movw	r30, r18
     7d6:	20 81       	ld	r18, Z
     7d8:	2e 7f       	andi	r18, 0xFE	; 254
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
}
     7de:	00 00       	nop
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <Timer_Init>:
/**********************************************************************************************************************************************/
									/*Timer Initialization Function*/
/**********************************************************************************************************************************************/
u8 Timer_Init(Timer_Configuration_S_H* Confg_S)
{
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <Timer_Init+0x6>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <Timer_Init+0x8>
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <Timer_Init+0xa>
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	9e 83       	std	Y+6, r25	; 0x06
     7f6:	8d 83       	std	Y+5, r24	; 0x05
	/******************************************************************************************************************************************/
									/*Importing the Values Stored in the Configuration Structure*/
	/******************************************************************************************************************************************/
	u8 mode = Confg_S->Mode , timer_psc = Confg_S->Timer_Psc , timer_channel = Confg_S->Timer_Channel , timer_mode = Confg_S->Timer_Mode;
     7f8:	8d 81       	ldd	r24, Y+5	; 0x05
     7fa:	9e 81       	ldd	r25, Y+6	; 0x06
     7fc:	fc 01       	movw	r30, r24
     7fe:	83 81       	ldd	r24, Z+3	; 0x03
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	8d 81       	ldd	r24, Y+5	; 0x05
     804:	9e 81       	ldd	r25, Y+6	; 0x06
     806:	fc 01       	movw	r30, r24
     808:	81 81       	ldd	r24, Z+1	; 0x01
     80a:	8a 83       	std	Y+2, r24	; 0x02
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	9e 81       	ldd	r25, Y+6	; 0x06
     810:	fc 01       	movw	r30, r24
     812:	80 81       	ld	r24, Z
     814:	8b 83       	std	Y+3, r24	; 0x03
     816:	8d 81       	ldd	r24, Y+5	; 0x05
     818:	9e 81       	ldd	r25, Y+6	; 0x06
     81a:	fc 01       	movw	r30, r24
     81c:	82 81       	ldd	r24, Z+2	; 0x02
     81e:	8c 83       	std	Y+4, r24	; 0x04
	/*Setting the Pre-Scalar Values*/
	Prescaller_Timer[timer_channel] = timer_psc ;
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	88 2f       	mov	r24, r24
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	8c 59       	subi	r24, 0x9C	; 156
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	2a 81       	ldd	r18, Y+2	; 0x02
     82c:	fc 01       	movw	r30, r24
     82e:	20 83       	st	Z, r18
	if(timer_channel == 0)
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	88 23       	and	r24, r24
     834:	e1 f4       	brne	.+56     	; 0x86e <__stack+0xf>
	{
		// Wave Form Generation
		CLEAR_BIT(TCCR0_Reg,WGM00_Reg) ;
     836:	83 e5       	ldi	r24, 0x53	; 83
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	23 e5       	ldi	r18, 0x53	; 83
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	2f 7b       	andi	r18, 0xBF	; 191
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
		CLEAR_BIT(TCCR0_Reg,WGM01_Reg) ;
     848:	83 e5       	ldi	r24, 0x53	; 83
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	23 e5       	ldi	r18, 0x53	; 83
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	27 7f       	andi	r18, 0xF7	; 247
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
		// Enabling the Interrupt
		SET_BIT(TIMSK_Reg,TOIE0_reg) ;
     85a:	89 e5       	ldi	r24, 0x59	; 89
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	29 e5       	ldi	r18, 0x59	; 89
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	21 60       	ori	r18, 0x01	; 1
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
     86c:	4f c0       	rjmp	.+158    	; 0x90c <__stack+0xad>
		//sei() ;
	}
	else if(timer_channel == 1)
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	71 f5       	brne	.+92     	; 0x8d0 <__stack+0x71>
	{
		/*Clearing WGM10:11 on TCCRA First*/
		CLEAR_BIT(TCCR1A_Reg,WGM10_Reg) ;
     874:	8f e4       	ldi	r24, 0x4F	; 79
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2f e4       	ldi	r18, 0x4F	; 79
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	f9 01       	movw	r30, r18
     87e:	20 81       	ld	r18, Z
     880:	2e 7f       	andi	r18, 0xFE	; 254
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
		CLEAR_BIT(TCCR1A_Reg,WGM11_Reg) ;
     886:	8f e4       	ldi	r24, 0x4F	; 79
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2f e4       	ldi	r18, 0x4F	; 79
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	2d 7f       	andi	r18, 0xFD	; 253
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
		/*Clearing WGM12:13 on TCCRB*/
		CLEAR_BIT(TCCR1B_Reg,WGM12_Reg) ;
     898:	8e e4       	ldi	r24, 0x4E	; 78
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	2e e4       	ldi	r18, 0x4E	; 78
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 81       	ld	r18, Z
     8a4:	27 7f       	andi	r18, 0xF7	; 247
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
		CLEAR_BIT(TCCR1B_Reg,WGM13_Reg) ;
     8aa:	8e e4       	ldi	r24, 0x4E	; 78
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	2e e4       	ldi	r18, 0x4E	; 78
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	20 81       	ld	r18, Z
     8b6:	2f 7e       	andi	r18, 0xEF	; 239
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
		/*Enabling the Overflow Interrupt*/
		SET_BIT(TIMSK_Reg,TOIE1_Reg) ;
     8bc:	89 e5       	ldi	r24, 0x59	; 89
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	29 e5       	ldi	r18, 0x59	; 89
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	24 60       	ori	r18, 0x04	; 4
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
     8ce:	1e c0       	rjmp	.+60     	; 0x90c <__stack+0xad>
		//sei() ;
	}
	else if(timer_channel == 2)
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	d9 f4       	brne	.+54     	; 0x90c <__stack+0xad>
	{
		// Wave Form Generation
		CLEAR_BIT(TCCR0_Reg,WGM00_Reg) ;
     8d6:	83 e5       	ldi	r24, 0x53	; 83
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	23 e5       	ldi	r18, 0x53	; 83
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	2f 7b       	andi	r18, 0xBF	; 191
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
		CLEAR_BIT(TCCR0_Reg,WGM01_Reg) ;
     8e8:	83 e5       	ldi	r24, 0x53	; 83
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	23 e5       	ldi	r18, 0x53	; 83
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	f9 01       	movw	r30, r18
     8f2:	20 81       	ld	r18, Z
     8f4:	27 7f       	andi	r18, 0xF7	; 247
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 83       	st	Z, r18
		/// Enabling the Interrupt
		SET_BIT(TIMSK_Reg,TOIE0_reg) ;
     8fa:	89 e5       	ldi	r24, 0x59	; 89
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	29 e5       	ldi	r18, 0x59	; 89
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	f9 01       	movw	r30, r18
     904:	20 81       	ld	r18, Z
     906:	21 60       	ori	r18, 0x01	; 1
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
		//sei() ;
	}
	return E_OK ;
     90c:	80 e0       	ldi	r24, 0x00	; 0
}
     90e:	26 96       	adiw	r28, 0x06	; 6
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <Timer_Start>:
/**************************************************************************************************************************************/
												/*Creating Timer Start Function */
/**************************************************************************************************************************************/
u8 Timer_Start(u8 Timer_Channel,u32 Required_Time)
{
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	65 97       	sbiw	r28, 0x15	; 21
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	89 8b       	std	Y+17, r24	; 0x11
     93e:	4a 8b       	std	Y+18, r20	; 0x12
     940:	5b 8b       	std	Y+19, r21	; 0x13
     942:	6c 8b       	std	Y+20, r22	; 0x14
     944:	7d 8b       	std	Y+21, r23	; 0x15
	/*Declaring the Minimum Tick */
	double  tick_min = 0 ; 
     946:	19 82       	std	Y+1, r1	; 0x01
     948:	1a 82       	std	Y+2, r1	; 0x02
     94a:	1b 82       	std	Y+3, r1	; 0x03
     94c:	1c 82       	std	Y+4, r1	; 0x04
	if(Timer_Channel == 0)
     94e:	89 89       	ldd	r24, Y+17	; 0x11
     950:	88 23       	and	r24, r24
     952:	09 f0       	breq	.+2      	; 0x956 <Timer_Start+0x36>
     954:	48 c1       	rjmp	.+656    	; 0xbe6 <Timer_Start+0x2c6>
	{
		/*Setting the Pre-Scalar Values*/
		switch (Prescaller_Timer[Timer_Channel])
     956:	89 89       	ldd	r24, Y+17	; 0x11
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	8c 59       	subi	r24, 0x9C	; 156
     95e:	9f 4f       	sbci	r25, 0xFF	; 255
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	91 05       	cpc	r25, r1
     96c:	81 f1       	breq	.+96     	; 0x9ce <Timer_Start+0xae>
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	91 05       	cpc	r25, r1
     972:	34 f4       	brge	.+12     	; 0x980 <Timer_Start+0x60>
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	91 05       	cpc	r25, r1
     978:	51 f0       	breq	.+20     	; 0x98e <Timer_Start+0x6e>
     97a:	02 97       	sbiw	r24, 0x02	; 2
     97c:	b1 f0       	breq	.+44     	; 0x9aa <Timer_Start+0x8a>
     97e:	5d c0       	rjmp	.+186    	; 0xa3a <Timer_Start+0x11a>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	91 05       	cpc	r25, r1
     984:	b1 f1       	breq	.+108    	; 0x9f2 <Timer_Start+0xd2>
     986:	05 97       	sbiw	r24, 0x05	; 5
     988:	09 f4       	brne	.+2      	; 0x98c <Timer_Start+0x6c>
     98a:	45 c0       	rjmp	.+138    	; 0xa16 <Timer_Start+0xf6>
     98c:	56 c0       	rjmp	.+172    	; 0xa3a <Timer_Start+0x11a>
		{
		case PSC_0 :
		TCCR0 |= PSC_REG_0 ;
     98e:	83 e5       	ldi	r24, 0x53	; 83
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	23 e5       	ldi	r18, 0x53	; 83
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	21 60       	ori	r18, 0x01	; 1
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
		tick_min = (1/F_CPU_Timer) ;
     9a0:	19 82       	std	Y+1, r1	; 0x01
     9a2:	1a 82       	std	Y+2, r1	; 0x02
     9a4:	1b 82       	std	Y+3, r1	; 0x03
     9a6:	1c 82       	std	Y+4, r1	; 0x04
		break ;
     9a8:	48 c0       	rjmp	.+144    	; 0xa3a <Timer_Start+0x11a>
		case PSC_8 :
		TCCR0 |= PSC_REG_8 ;
     9aa:	83 e5       	ldi	r24, 0x53	; 83
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	23 e5       	ldi	r18, 0x53	; 83
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	22 60       	ori	r18, 0x02	; 2
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
		tick_min = (8/F_CPU_Timer) ;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e8       	ldi	r26, 0x80	; 128
     9c2:	bf e3       	ldi	r27, 0x3F	; 63
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	ab 83       	std	Y+3, r26	; 0x03
     9ca:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     9cc:	36 c0       	rjmp	.+108    	; 0xa3a <Timer_Start+0x11a>
		case PSC_64 :
		TCCR0 |= PSC_REG_64 ;
     9ce:	83 e5       	ldi	r24, 0x53	; 83
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	23 e5       	ldi	r18, 0x53	; 83
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	23 60       	ori	r18, 0x03	; 3
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
		tick_min = (64/F_CPU_Timer) ;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b1 e4       	ldi	r27, 0x41	; 65
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	ab 83       	std	Y+3, r26	; 0x03
     9ee:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     9f0:	24 c0       	rjmp	.+72     	; 0xa3a <Timer_Start+0x11a>
		case PSC_256 :
		TCCR0 |= PSC_REG_256 ;
     9f2:	83 e5       	ldi	r24, 0x53	; 83
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	23 e5       	ldi	r18, 0x53	; 83
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	f9 01       	movw	r30, r18
     9fc:	20 81       	ld	r18, Z
     9fe:	24 60       	ori	r18, 0x04	; 4
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
		tick_min = (256/F_CPU_Timer) ;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b2 e4       	ldi	r27, 0x42	; 66
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	ab 83       	std	Y+3, r26	; 0x03
     a12:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <Timer_Start+0x11a>
		case PSC_1024 :
		TCCR0 |= PSC_REG_1024 ;
     a16:	83 e5       	ldi	r24, 0x53	; 83
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	23 e5       	ldi	r18, 0x53	; 83
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	25 60       	ori	r18, 0x05	; 5
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
		tick_min = (1024/F_CPU_Timer) ;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b3 e4       	ldi	r27, 0x43	; 67
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	9a 83       	std	Y+2, r25	; 0x02
     a34:	ab 83       	std	Y+3, r26	; 0x03
     a36:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     a38:	00 00       	nop
		}
		/*Calculating Total Number of Ticks*/
		Ticks = (Required_Time*1000)/tick_min ;
     a3a:	2a 89       	ldd	r18, Y+18	; 0x12
     a3c:	3b 89       	ldd	r19, Y+19	; 0x13
     a3e:	4c 89       	ldd	r20, Y+20	; 0x14
     a40:	5d 89       	ldd	r21, Y+21	; 0x15
     a42:	88 ee       	ldi	r24, 0xE8	; 232
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	dc 01       	movw	r26, r24
     a48:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__muluhisi3>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__floatunsisf>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	29 81       	ldd	r18, Y+1	; 0x01
     a5e:	3a 81       	ldd	r19, Y+2	; 0x02
     a60:	4b 81       	ldd	r20, Y+3	; 0x03
     a62:	5c 81       	ldd	r21, Y+4	; 0x04
     a64:	bc 01       	movw	r22, r24
     a66:	cd 01       	movw	r24, r26
     a68:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__divsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	bc 01       	movw	r22, r24
     a72:	cd 01       	movw	r24, r26
     a74:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     a80:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     a84:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     a88:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
		Initial_ticks = Ticks ;
     a8c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     a90:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     a94:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     a98:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     a9c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Initial_ticks>
     aa0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Initial_ticks+0x1>
     aa4:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <Initial_ticks+0x2>
     aa8:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <Initial_ticks+0x3>
		//Ticks = Required_Time ;
		/*counting the Number of Loops*/
		//u32 Loop = Ticks / Timer0_OVF ;
		u32 Loop = 1 ;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	8d 83       	std	Y+5, r24	; 0x05
     ab6:	9e 83       	std	Y+6, r25	; 0x06
     ab8:	af 83       	std	Y+7, r26	; 0x07
     aba:	b8 87       	std	Y+8, r27	; 0x08
		for(i=0;i<(Loop+1);i++)
     abc:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <i>
     ac0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <i+0x1>
     ac4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <i+0x2>
     ac8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <i+0x3>
     acc:	73 c0       	rjmp	.+230    	; 0xbb4 <Timer_Start+0x294>
		{
		if(Ticks < Timer0_OVF_Val)
     ace:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     ad2:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     ad6:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     ada:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     ade:	8f 3f       	cpi	r24, 0xFF	; 255
     ae0:	91 05       	cpc	r25, r1
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	70 f5       	brcc	.+92     	; 0xb44 <Timer_Start+0x224>
		{
			/*Initializing the Timer Register*/
			TCNT0_Reg = Timer0_OVF_Val-Ticks;
     ae8:	22 e5       	ldi	r18, 0x52	; 82
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     af0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     af4:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     af8:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     afc:	80 95       	com	r24
     afe:	f9 01       	movw	r30, r18
     b00:	80 83       	st	Z, r24
			Ticks = Ticks - Ticks ;
     b02:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <Ticks>
     b06:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <Ticks+0x1>
     b0a:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <Ticks+0x2>
     b0e:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <Ticks+0x3>
     b12:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     b16:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     b1a:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     b1e:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     b22:	79 01       	movw	r14, r18
     b24:	8a 01       	movw	r16, r20
     b26:	e8 1a       	sub	r14, r24
     b28:	f9 0a       	sbc	r15, r25
     b2a:	0a 0b       	sbc	r16, r26
     b2c:	1b 0b       	sbc	r17, r27
     b2e:	d8 01       	movw	r26, r16
     b30:	c7 01       	movw	r24, r14
     b32:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     b36:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     b3a:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     b3e:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
			/*polling on the Overflow Register  */
			//while(READ_BIT(TIFR_Reg,TOV0_Reg)==0) ;
			/*Clearing the Overflow Bit*/
			//SET_BIT(TIFR_Reg,TOV0_Reg) ; 
			break ;
     b42:	22 c3       	rjmp	.+1604   	; 0x1188 <Timer_Start+0x868>
		}
		else if(Ticks >= Timer0_OVF_Val)
     b44:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     b48:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     b4c:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     b50:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     b54:	8f 3f       	cpi	r24, 0xFF	; 255
     b56:	91 05       	cpc	r25, r1
     b58:	a1 05       	cpc	r26, r1
     b5a:	b1 05       	cpc	r27, r1
     b5c:	c0 f0       	brcs	.+48     	; 0xb8e <Timer_Start+0x26e>
		{
			/*Initializing the Timer Register*/
			TCNT0_Reg = 0x00 ;
     b5e:	82 e5       	ldi	r24, 0x52	; 82
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	10 82       	st	Z, r1
			/*polling on the Overflow Register  */
			//while(READ_BIT(TIFR_Reg,TOV0_Reg) == 0) ;
			/*Clearing the Overflow Bit*/
			//SET_BIT(TIFR_Reg,TOV0_Reg) ;			
			Ticks = Ticks - Timer0_OVF_Val ;
     b66:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     b6a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     b6e:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     b72:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	91 09       	sbc	r25, r1
     b7a:	a1 09       	sbc	r26, r1
     b7c:	b1 09       	sbc	r27, r1
     b7e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     b82:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     b86:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     b8a:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
		Initial_ticks = Ticks ;
		//Ticks = Required_Time ;
		/*counting the Number of Loops*/
		//u32 Loop = Ticks / Timer0_OVF ;
		u32 Loop = 1 ;
		for(i=0;i<(Loop+1);i++)
     b8e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
     b92:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <i+0x1>
     b96:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <i+0x2>
     b9a:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <i+0x3>
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	a1 1d       	adc	r26, r1
     ba2:	b1 1d       	adc	r27, r1
     ba4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <i>
     ba8:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <i+0x1>
     bac:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <i+0x2>
     bb0:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <i+0x3>
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	9e 81       	ldd	r25, Y+6	; 0x06
     bb8:	af 81       	ldd	r26, Y+7	; 0x07
     bba:	b8 85       	ldd	r27, Y+8	; 0x08
     bbc:	9c 01       	movw	r18, r24
     bbe:	ad 01       	movw	r20, r26
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
     bcc:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <i+0x1>
     bd0:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <i+0x2>
     bd4:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <i+0x3>
     bd8:	82 17       	cp	r24, r18
     bda:	93 07       	cpc	r25, r19
     bdc:	a4 07       	cpc	r26, r20
     bde:	b5 07       	cpc	r27, r21
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <Timer_Start+0x2c4>
     be2:	75 cf       	rjmp	.-278    	; 0xace <Timer_Start+0x1ae>
     be4:	d1 c2       	rjmp	.+1442   	; 0x1188 <Timer_Start+0x868>
		}
		//Timer_Stop_0() ;
		//PORTB = 0x00 ;
	}
	/*Timer 1 Configuration */
	else if(Timer_Channel == 1)
     be6:	89 89       	ldd	r24, Y+17	; 0x11
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	09 f0       	breq	.+2      	; 0xbee <Timer_Start+0x2ce>
     bec:	5e c1       	rjmp	.+700    	; 0xeaa <Timer_Start+0x58a>
	{
		/*Setting the pre-Scalar */
		switch (Prescaller_Timer[Timer_Channel])
     bee:	89 89       	ldd	r24, Y+17	; 0x11
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	8c 59       	subi	r24, 0x9C	; 156
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	fc 01       	movw	r30, r24
     bfa:	80 81       	ld	r24, Z
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	91 05       	cpc	r25, r1
     c04:	81 f1       	breq	.+96     	; 0xc66 <Timer_Start+0x346>
     c06:	84 30       	cpi	r24, 0x04	; 4
     c08:	91 05       	cpc	r25, r1
     c0a:	34 f4       	brge	.+12     	; 0xc18 <Timer_Start+0x2f8>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	91 05       	cpc	r25, r1
     c10:	51 f0       	breq	.+20     	; 0xc26 <Timer_Start+0x306>
     c12:	02 97       	sbiw	r24, 0x02	; 2
     c14:	b1 f0       	breq	.+44     	; 0xc42 <Timer_Start+0x322>
     c16:	5d c0       	rjmp	.+186    	; 0xcd2 <Timer_Start+0x3b2>
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	91 05       	cpc	r25, r1
     c1c:	b1 f1       	breq	.+108    	; 0xc8a <Timer_Start+0x36a>
     c1e:	05 97       	sbiw	r24, 0x05	; 5
     c20:	09 f4       	brne	.+2      	; 0xc24 <Timer_Start+0x304>
     c22:	45 c0       	rjmp	.+138    	; 0xcae <Timer_Start+0x38e>
     c24:	56 c0       	rjmp	.+172    	; 0xcd2 <Timer_Start+0x3b2>
		{
		case PSC_0 :
		TCCR1B_Reg |= PSC_REG_0 ;
     c26:	8e e4       	ldi	r24, 0x4E	; 78
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	2e e4       	ldi	r18, 0x4E	; 78
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	21 60       	ori	r18, 0x01	; 1
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
		tick_min = (1/F_CPU_Timer) ;
     c38:	19 82       	std	Y+1, r1	; 0x01
     c3a:	1a 82       	std	Y+2, r1	; 0x02
     c3c:	1b 82       	std	Y+3, r1	; 0x03
     c3e:	1c 82       	std	Y+4, r1	; 0x04
		break ;
     c40:	48 c0       	rjmp	.+144    	; 0xcd2 <Timer_Start+0x3b2>
		case PSC_8 :
		TCCR1B_Reg |= PSC_REG_8 ;
     c42:	8e e4       	ldi	r24, 0x4E	; 78
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	2e e4       	ldi	r18, 0x4E	; 78
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	20 81       	ld	r18, Z
     c4e:	22 60       	ori	r18, 0x02	; 2
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
		tick_min = (8/F_CPU_Timer) ;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e8       	ldi	r26, 0x80	; 128
     c5a:	bf e3       	ldi	r27, 0x3F	; 63
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	ab 83       	std	Y+3, r26	; 0x03
     c62:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     c64:	36 c0       	rjmp	.+108    	; 0xcd2 <Timer_Start+0x3b2>
		case PSC_64 :
		TCCR1B_Reg |= PSC_REG_64 ;
     c66:	8e e4       	ldi	r24, 0x4E	; 78
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	2e e4       	ldi	r18, 0x4E	; 78
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	20 81       	ld	r18, Z
     c72:	23 60       	ori	r18, 0x03	; 3
     c74:	fc 01       	movw	r30, r24
     c76:	20 83       	st	Z, r18
		tick_min = (64/F_CPU_Timer) ;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b1 e4       	ldi	r27, 0x41	; 65
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	ab 83       	std	Y+3, r26	; 0x03
     c86:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     c88:	24 c0       	rjmp	.+72     	; 0xcd2 <Timer_Start+0x3b2>
		case PSC_256 :
		TCCR1B_Reg |= PSC_REG_256 ;
     c8a:	8e e4       	ldi	r24, 0x4E	; 78
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	2e e4       	ldi	r18, 0x4E	; 78
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	24 60       	ori	r18, 0x04	; 4
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
		tick_min = (256/F_CPU_Timer) ;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	a0 e0       	ldi	r26, 0x00	; 0
     ca2:	b2 e4       	ldi	r27, 0x42	; 66
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	ab 83       	std	Y+3, r26	; 0x03
     caa:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <Timer_Start+0x3b2>
		case PSC_1024 :
		TCCR1B_Reg |= PSC_REG_1024 ;
     cae:	8e e4       	ldi	r24, 0x4E	; 78
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	2e e4       	ldi	r18, 0x4E	; 78
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	25 60       	ori	r18, 0x05	; 5
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
		tick_min = (1024/F_CPU_Timer) ;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b3 e4       	ldi	r27, 0x43	; 67
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	ab 83       	std	Y+3, r26	; 0x03
     cce:	bc 83       	std	Y+4, r27	; 0x04
		break ;
     cd0:	00 00       	nop
		}
		/*Calculating Total Number of Ticks*/
		Ticks=(Required_Time*1000)/tick_min ;
     cd2:	2a 89       	ldd	r18, Y+18	; 0x12
     cd4:	3b 89       	ldd	r19, Y+19	; 0x13
     cd6:	4c 89       	ldd	r20, Y+20	; 0x14
     cd8:	5d 89       	ldd	r21, Y+21	; 0x15
     cda:	88 ee       	ldi	r24, 0xE8	; 232
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	dc 01       	movw	r26, r24
     ce0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__muluhisi3>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	bc 01       	movw	r22, r24
     cea:	cd 01       	movw	r24, r26
     cec:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__floatunsisf>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	29 81       	ldd	r18, Y+1	; 0x01
     cf6:	3a 81       	ldd	r19, Y+2	; 0x02
     cf8:	4b 81       	ldd	r20, Y+3	; 0x03
     cfa:	5c 81       	ldd	r21, Y+4	; 0x04
     cfc:	bc 01       	movw	r22, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__divsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     d18:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     d1c:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     d20:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
		u32 Loop = Ticks / Timer1_OVF ;
     d24:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     d28:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     d2c:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     d30:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	bc 01       	movw	r22, r24
     d3e:	cd 01       	movw	r24, r26
     d40:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__udivmodsi4>
     d44:	da 01       	movw	r26, r20
     d46:	c9 01       	movw	r24, r18
     d48:	89 87       	std	Y+9, r24	; 0x09
     d4a:	9a 87       	std	Y+10, r25	; 0x0a
     d4c:	ab 87       	std	Y+11, r26	; 0x0b
     d4e:	bc 87       	std	Y+12, r27	; 0x0c
		/*Looping on the Timer register*/
		for(i=0;i<(Loop+1);i++)
     d50:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <i>
     d54:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <i+0x1>
     d58:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <i+0x2>
     d5c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <i+0x3>
     d60:	87 c0       	rjmp	.+270    	; 0xe70 <Timer_Start+0x550>
			{
				/*Case 1*/
				if(Ticks<Timer1_OVF)
     d62:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     d66:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     d6a:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     d6e:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	40 f5       	brcc	.+80     	; 0xdcc <Timer_Start+0x4ac>
				{
					/*Timer Counter Register Initialization */
					TCNT1_Reg = Timer1_OVF-Ticks ;
     d7c:	2c e4       	ldi	r18, 0x4C	; 76
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     d84:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     d88:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     d8c:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     d90:	80 95       	com	r24
     d92:	90 95       	com	r25
     d94:	f9 01       	movw	r30, r18
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
					/*Checking on the Overflow Flag*/
					while(READ_BIT(TIFR_Reg,TOV1) == 0) ;
     d9a:	00 00       	nop
     d9c:	88 e5       	ldi	r24, 0x58	; 88
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	fc 01       	movw	r30, r24
     da2:	80 81       	ld	r24, Z
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	84 70       	andi	r24, 0x04	; 4
     daa:	99 27       	eor	r25, r25
     dac:	95 95       	asr	r25
     dae:	87 95       	ror	r24
     db0:	95 95       	asr	r25
     db2:	87 95       	ror	r24
     db4:	89 2b       	or	r24, r25
     db6:	91 f3       	breq	.-28     	; 0xd9c <Timer_Start+0x47c>
					/*Clearing the Over flow Register*/
					SET_BIT(TIFR_Reg,TOV0_Reg) ;			
     db8:	88 e5       	ldi	r24, 0x58	; 88
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	28 e5       	ldi	r18, 0x58	; 88
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	f9 01       	movw	r30, r18
     dc2:	20 81       	ld	r18, Z
     dc4:	21 60       	ori	r18, 0x01	; 1
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
					break ;
     dca:	6c c0       	rjmp	.+216    	; 0xea4 <Timer_Start+0x584>
				}
				else if(Ticks >= Timer1_OVF)
     dcc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     dd0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     dd4:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     dd8:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     ddc:	8f 3f       	cpi	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	a1 05       	cpc	r26, r1
     de2:	b1 05       	cpc	r27, r1
     de4:	08 f4       	brcc	.+2      	; 0xde8 <Timer_Start+0x4c8>
     de6:	5d c0       	rjmp	.+186    	; 0xea2 <Timer_Start+0x582>
				{
					/*Initializing the Counter*/
					TCNT1_Reg = 0x00 ;
     de8:	8c e4       	ldi	r24, 0x4C	; 76
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	11 82       	std	Z+1, r1	; 0x01
     df0:	10 82       	st	Z, r1
					/*Polling on the Overflow Flag*/
					while(READ_BIT(TIFR_Reg,TOV1) == 0) ;
     df2:	00 00       	nop
     df4:	88 e5       	ldi	r24, 0x58	; 88
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	80 81       	ld	r24, Z
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	84 70       	andi	r24, 0x04	; 4
     e02:	99 27       	eor	r25, r25
     e04:	95 95       	asr	r25
     e06:	87 95       	ror	r24
     e08:	95 95       	asr	r25
     e0a:	87 95       	ror	r24
     e0c:	89 2b       	or	r24, r25
     e0e:	91 f3       	breq	.-28     	; 0xdf4 <Timer_Start+0x4d4>
					/*Checking on the Overflow Flag*/
					SET_BIT(TIFR_Reg,TOV0_Reg) ;			
     e10:	88 e5       	ldi	r24, 0x58	; 88
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	28 e5       	ldi	r18, 0x58	; 88
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	21 60       	ori	r18, 0x01	; 1
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
					Ticks = Ticks - Timer1_OVF ;
     e22:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     e26:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
     e2a:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
     e2e:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	a1 09       	sbc	r26, r1
     e38:	b1 09       	sbc	r27, r1
     e3a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     e3e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     e42:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     e46:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
		}
		/*Calculating Total Number of Ticks*/
		Ticks=(Required_Time*1000)/tick_min ;
		u32 Loop = Ticks / Timer1_OVF ;
		/*Looping on the Timer register*/
		for(i=0;i<(Loop+1);i++)
     e4a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
     e4e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <i+0x1>
     e52:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <i+0x2>
     e56:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <i+0x3>
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	a1 1d       	adc	r26, r1
     e5e:	b1 1d       	adc	r27, r1
     e60:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <i>
     e64:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <i+0x1>
     e68:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <i+0x2>
     e6c:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <i+0x3>
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	ab 85       	ldd	r26, Y+11	; 0x0b
     e76:	bc 85       	ldd	r27, Y+12	; 0x0c
     e78:	9c 01       	movw	r18, r24
     e7a:	ad 01       	movw	r20, r26
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	4f 4f       	sbci	r20, 0xFF	; 255
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
     e88:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <i+0x1>
     e8c:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <i+0x2>
     e90:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <i+0x3>
     e94:	82 17       	cp	r24, r18
     e96:	93 07       	cpc	r25, r19
     e98:	a4 07       	cpc	r26, r20
     e9a:	b5 07       	cpc	r27, r21
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <Timer_Start+0x580>
     e9e:	61 cf       	rjmp	.-318    	; 0xd62 <Timer_Start+0x442>
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <Timer_Start+0x584>
					SET_BIT(TIFR_Reg,TOV0_Reg) ;			
					Ticks = Ticks - Timer1_OVF ;
				}
				else
				{
					break ;
     ea2:	00 00       	nop
				}
			}
			Timer_Stop_1() ;		
     ea4:	0e 94 ad 03 	call	0x75a	; 0x75a <Timer_Stop_1>
     ea8:	6f c1       	rjmp	.+734    	; 0x1188 <Timer_Start+0x868>
	}
	else if(Timer_Channel == 2)
     eaa:	89 89       	ldd	r24, Y+17	; 0x11
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	09 f0       	breq	.+2      	; 0xeb2 <Timer_Start+0x592>
     eb0:	6b c1       	rjmp	.+726    	; 0x1188 <Timer_Start+0x868>
	{
		switch (Prescaller_Timer[Timer_Channel])
     eb2:	89 89       	ldd	r24, Y+17	; 0x11
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	8c 59       	subi	r24, 0x9C	; 156
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	fc 01       	movw	r30, r24
     ebe:	80 81       	ld	r24, Z
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	81 f1       	breq	.+96     	; 0xf2a <Timer_Start+0x60a>
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	91 05       	cpc	r25, r1
     ece:	34 f4       	brge	.+12     	; 0xedc <Timer_Start+0x5bc>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	51 f0       	breq	.+20     	; 0xeea <Timer_Start+0x5ca>
     ed6:	02 97       	sbiw	r24, 0x02	; 2
     ed8:	b1 f0       	breq	.+44     	; 0xf06 <Timer_Start+0x5e6>
     eda:	5d c0       	rjmp	.+186    	; 0xf96 <Timer_Start+0x676>
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	91 05       	cpc	r25, r1
     ee0:	b1 f1       	breq	.+108    	; 0xf4e <Timer_Start+0x62e>
     ee2:	05 97       	sbiw	r24, 0x05	; 5
     ee4:	09 f4       	brne	.+2      	; 0xee8 <Timer_Start+0x5c8>
     ee6:	45 c0       	rjmp	.+138    	; 0xf72 <Timer_Start+0x652>
     ee8:	56 c0       	rjmp	.+172    	; 0xf96 <Timer_Start+0x676>
		{
			case PSC_0 :
			TCCR2_Reg |= PSC_REG_0 ;
     eea:	85 e4       	ldi	r24, 0x45	; 69
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	25 e4       	ldi	r18, 0x45	; 69
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	21 60       	ori	r18, 0x01	; 1
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18
			tick_min = (1/F_CPU_Timer) ;
     efc:	19 82       	std	Y+1, r1	; 0x01
     efe:	1a 82       	std	Y+2, r1	; 0x02
     f00:	1b 82       	std	Y+3, r1	; 0x03
     f02:	1c 82       	std	Y+4, r1	; 0x04
			break ;
     f04:	51 c0       	rjmp	.+162    	; 0xfa8 <Timer_Start+0x688>
			case PSC_8 :
			TCCR2_Reg |= PSC_REG_8 ;
     f06:	85 e4       	ldi	r24, 0x45	; 69
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	25 e4       	ldi	r18, 0x45	; 69
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	f9 01       	movw	r30, r18
     f10:	20 81       	ld	r18, Z
     f12:	22 60       	ori	r18, 0x02	; 2
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
			tick_min = (8/F_CPU_Timer) ;
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e8       	ldi	r26, 0x80	; 128
     f1e:	bf e3       	ldi	r27, 0x3F	; 63
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	ab 83       	std	Y+3, r26	; 0x03
     f26:	bc 83       	std	Y+4, r27	; 0x04
			break ;
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <Timer_Start+0x688>
			case PSC_64 :
			TCCR2_Reg |= PSC_64 ;
     f2a:	85 e4       	ldi	r24, 0x45	; 69
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	25 e4       	ldi	r18, 0x45	; 69
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	23 60       	ori	r18, 0x03	; 3
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
			tick_min = (64/F_CPU_Timer) ;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b1 e4       	ldi	r27, 0x41	; 65
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	ab 83       	std	Y+3, r26	; 0x03
     f4a:	bc 83       	std	Y+4, r27	; 0x04
			break ;
     f4c:	2d c0       	rjmp	.+90     	; 0xfa8 <Timer_Start+0x688>
			case PSC_256 :
			TCCR2_Reg |= PSC_REG_256 ;
     f4e:	85 e4       	ldi	r24, 0x45	; 69
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	25 e4       	ldi	r18, 0x45	; 69
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	f9 01       	movw	r30, r18
     f58:	20 81       	ld	r18, Z
     f5a:	24 60       	ori	r18, 0x04	; 4
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
			tick_min = (256/F_CPU_Timer) ;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b2 e4       	ldi	r27, 0x42	; 66
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	ab 83       	std	Y+3, r26	; 0x03
     f6e:	bc 83       	std	Y+4, r27	; 0x04
			break ;
     f70:	1b c0       	rjmp	.+54     	; 0xfa8 <Timer_Start+0x688>
			case PSC_1024 :
			TCCR2_Reg |= PSC_REG_1024 ;
     f72:	85 e4       	ldi	r24, 0x45	; 69
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	25 e4       	ldi	r18, 0x45	; 69
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	f9 01       	movw	r30, r18
     f7c:	20 81       	ld	r18, Z
     f7e:	25 60       	ori	r18, 0x05	; 5
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
			tick_min = (1024/F_CPU_Timer) ;
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b3 e4       	ldi	r27, 0x43	; 67
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	ab 83       	std	Y+3, r26	; 0x03
     f92:	bc 83       	std	Y+4, r27	; 0x04
			break ;
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <Timer_Start+0x688>
			default:
			tick_min = (1024/F_CPU_Timer) ;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b3 e4       	ldi	r27, 0x43	; 67
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	ab 83       	std	Y+3, r26	; 0x03
     fa4:	bc 83       	std	Y+4, r27	; 0x04
			break;
     fa6:	00 00       	nop
		}
		/*Calculating Total Number of Ticks*/
		Ticks = (Required_Time*1000) / 	tick_min ;
     fa8:	2a 89       	ldd	r18, Y+18	; 0x12
     faa:	3b 89       	ldd	r19, Y+19	; 0x13
     fac:	4c 89       	ldd	r20, Y+20	; 0x14
     fae:	5d 89       	ldd	r21, Y+21	; 0x15
     fb0:	88 ee       	ldi	r24, 0xE8	; 232
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	dc 01       	movw	r26, r24
     fb6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__muluhisi3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__floatunsisf>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	29 81       	ldd	r18, Y+1	; 0x01
     fcc:	3a 81       	ldd	r19, Y+2	; 0x02
     fce:	4b 81       	ldd	r20, Y+3	; 0x03
     fd0:	5c 81       	ldd	r21, Y+4	; 0x04
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__divsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	bc 01       	movw	r22, r24
     fe0:	cd 01       	movw	r24, r26
     fe2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
     fee:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
     ff2:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
     ff6:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
		u32 Loop = Ticks / Timer2_OVF ;
     ffa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
     ffe:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
    1002:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
    1006:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__udivmodsi4>
    101a:	da 01       	movw	r26, r20
    101c:	c9 01       	movw	r24, r18
    101e:	8d 87       	std	Y+13, r24	; 0x0d
    1020:	9e 87       	std	Y+14, r25	; 0x0e
    1022:	af 87       	std	Y+15, r26	; 0x0f
    1024:	b8 8b       	std	Y+16, r27	; 0x10
			for(i=0;i<Loop+1;i++)
    1026:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <i>
    102a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <i+0x1>
    102e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <i+0x2>
    1032:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <i+0x3>
    1036:	8c c0       	rjmp	.+280    	; 0x1150 <Timer_Start+0x830>
			{
				if(Ticks < Timer2_OVF)
    1038:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
    103c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
    1040:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
    1044:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	91 05       	cpc	r25, r1
    104c:	a1 05       	cpc	r26, r1
    104e:	b1 05       	cpc	r27, r1
    1050:	50 f5       	brcc	.+84     	; 0x10a6 <Timer_Start+0x786>
				{
					/*Timer2 Counter*/
					TCNT2_Reg = Timer2_OVF-Ticks ;
    1052:	24 e4       	ldi	r18, 0x44	; 68
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
    105a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
    105e:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
    1062:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
    1066:	80 95       	com	r24
    1068:	f9 01       	movw	r30, r18
    106a:	80 83       	st	Z, r24
					/*Polling the Overflow Flag*/
					while(READ_BIT(TIFR_Reg,TOV2_Reg) == 0) ;
    106c:	00 00       	nop
    106e:	88 e5       	ldi	r24, 0x58	; 88
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	80 74       	andi	r24, 0x40	; 64
    107c:	99 27       	eor	r25, r25
    107e:	08 2e       	mov	r0, r24
    1080:	89 2f       	mov	r24, r25
    1082:	00 0c       	add	r0, r0
    1084:	88 1f       	adc	r24, r24
    1086:	99 0b       	sbc	r25, r25
    1088:	00 0c       	add	r0, r0
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	89 2b       	or	r24, r25
    1090:	71 f3       	breq	.-36     	; 0x106e <Timer_Start+0x74e>
					/*Clearing */
					SET_BIT(TIFR_Reg,TOV0_Reg) ;
    1092:	88 e5       	ldi	r24, 0x58	; 88
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	28 e5       	ldi	r18, 0x58	; 88
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	f9 01       	movw	r30, r18
    109c:	20 81       	ld	r18, Z
    109e:	21 60       	ori	r18, 0x01	; 1
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 83       	st	Z, r18
					break ;			
    10a4:	6f c0       	rjmp	.+222    	; 0x1184 <Timer_Start+0x864>
				}
				else if(Ticks >= Timer2_OVF)
    10a6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
    10aa:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
    10ae:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
    10b2:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
    10b6:	8f 3f       	cpi	r24, 0xFF	; 255
    10b8:	91 05       	cpc	r25, r1
    10ba:	a1 05       	cpc	r26, r1
    10bc:	b1 05       	cpc	r27, r1
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <Timer_Start+0x7a2>
    10c0:	60 c0       	rjmp	.+192    	; 0x1182 <Timer_Start+0x862>
				{
					TCNT2_Reg = 0x00 ;
    10c2:	84 e4       	ldi	r24, 0x44	; 68
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	10 82       	st	Z, r1
					while(READ_BIT(TIFR_Reg,TOV2_Reg)==0) ;			
    10ca:	00 00       	nop
    10cc:	88 e5       	ldi	r24, 0x58	; 88
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	80 74       	andi	r24, 0x40	; 64
    10da:	99 27       	eor	r25, r25
    10dc:	08 2e       	mov	r0, r24
    10de:	89 2f       	mov	r24, r25
    10e0:	00 0c       	add	r0, r0
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 0b       	sbc	r25, r25
    10e6:	00 0c       	add	r0, r0
    10e8:	88 1f       	adc	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	89 2b       	or	r24, r25
    10ee:	71 f3       	breq	.-36     	; 0x10cc <Timer_Start+0x7ac>
					SET_BIT(TIFR_Reg,TOV0_Reg) ;
    10f0:	88 e5       	ldi	r24, 0x58	; 88
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	28 e5       	ldi	r18, 0x58	; 88
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	20 81       	ld	r18, Z
    10fc:	21 60       	ori	r18, 0x01	; 1
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
					Ticks = Ticks - Timer2_OVF ;
    1102:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ticks>
    1106:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Ticks+0x1>
    110a:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Ticks+0x2>
    110e:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Ticks+0x3>
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	91 09       	sbc	r25, r1
    1116:	a1 09       	sbc	r26, r1
    1118:	b1 09       	sbc	r27, r1
    111a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Ticks>
    111e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Ticks+0x1>
    1122:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Ticks+0x2>
    1126:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Ticks+0x3>
			break;
		}
		/*Calculating Total Number of Ticks*/
		Ticks = (Required_Time*1000) / 	tick_min ;
		u32 Loop = Ticks / Timer2_OVF ;
			for(i=0;i<Loop+1;i++)
    112a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
    112e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <i+0x1>
    1132:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <i+0x2>
    1136:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <i+0x3>
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	a1 1d       	adc	r26, r1
    113e:	b1 1d       	adc	r27, r1
    1140:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <i>
    1144:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <i+0x1>
    1148:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <i+0x2>
    114c:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <i+0x3>
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	af 85       	ldd	r26, Y+15	; 0x0f
    1156:	b8 89       	ldd	r27, Y+16	; 0x10
    1158:	9c 01       	movw	r18, r24
    115a:	ad 01       	movw	r20, r26
    115c:	2f 5f       	subi	r18, 0xFF	; 255
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	4f 4f       	sbci	r20, 0xFF	; 255
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
    1168:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <i+0x1>
    116c:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <i+0x2>
    1170:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <i+0x3>
    1174:	82 17       	cp	r24, r18
    1176:	93 07       	cpc	r25, r19
    1178:	a4 07       	cpc	r26, r20
    117a:	b5 07       	cpc	r27, r21
    117c:	08 f4       	brcc	.+2      	; 0x1180 <Timer_Start+0x860>
    117e:	5c cf       	rjmp	.-328    	; 0x1038 <Timer_Start+0x718>
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <Timer_Start+0x864>
					SET_BIT(TIFR_Reg,TOV0_Reg) ;
					Ticks = Ticks - Timer2_OVF ;
				}
				else
				{
					break ;
    1182:	00 00       	nop
				}
		}
		Timer_Stop_2() ;
    1184:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Timer_Stop_2>
	}
	return E_OK ;
    1188:	80 e0       	ldi	r24, 0x00	; 0
}
    118a:	65 96       	adiw	r28, 0x15	; 21
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	08 95       	ret

000011a4 <TMU_Init>:
/**************Initializing the Configuration Structure******************/
Timer_Configuration_S_H Struct_Init_t ;
Timer_Configuration_S_H *Struct_Init = &Struct_Init_t ;
/****************This Will Be Called only one Time in my Function******/
u8 TMU_Init(u8 Timer_ID,u32 Res) 
{
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	29 97       	sbiw	r28, 0x09	; 9
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	4e 83       	std	Y+6, r20	; 0x06
    11bc:	5f 83       	std	Y+7, r21	; 0x07
    11be:	68 87       	std	Y+8, r22	; 0x08
    11c0:	79 87       	std	Y+9, r23	; 0x09
	u32 j_Counter;
	Struct_Init->Timer_Channel = Timer_ID;
    11c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Struct_Init>
    11c6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Struct_Init+0x1>
    11ca:	2d 81       	ldd	r18, Y+5	; 0x05
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18
	Struct_Init->Mode = 0 ;
    11d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Struct_Init>
    11d4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Struct_Init+0x1>
    11d8:	fc 01       	movw	r30, r24
    11da:	13 82       	std	Z+3, r1	; 0x03
	Struct_Init->Timer_Mode = 0 ;
    11dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Struct_Init>
    11e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Struct_Init+0x1>
    11e4:	fc 01       	movw	r30, r24
    11e6:	12 82       	std	Z+2, r1	; 0x02
	Struct_Init->Timer_Psc = PSC_1024 ;
    11e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Struct_Init>
    11ec:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Struct_Init+0x1>
    11f0:	25 e0       	ldi	r18, 0x05	; 5
    11f2:	fc 01       	movw	r30, r24
    11f4:	21 83       	std	Z+1, r18	; 0x01
	Struct_Init->Res = Res ;
    11f6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Struct_Init>
    11fa:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Struct_Init+0x1>
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	a8 85       	ldd	r26, Y+8	; 0x08
    1204:	b9 85       	ldd	r27, Y+9	; 0x09
    1206:	f9 01       	movw	r30, r18
    1208:	84 83       	std	Z+4, r24	; 0x04
    120a:	95 83       	std	Z+5, r25	; 0x05
    120c:	a6 83       	std	Z+6, r26	; 0x06
    120e:	b7 83       	std	Z+7, r27	; 0x07
	/*Choosing the Right Pre-Scalar*/
	Timer_Init(Struct_Init) ;
    1210:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Struct_Init>
    1214:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Struct_Init+0x1>
    1218:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Timer_Init>
	/************Initializing the Pointers to Null**********************/
	for(j_Counter=0;j_Counter<TASKS_NO;j_Counter++)
    121c:	19 82       	std	Y+1, r1	; 0x01
    121e:	1a 82       	std	Y+2, r1	; 0x02
    1220:	1b 82       	std	Y+3, r1	; 0x03
    1222:	1c 82       	std	Y+4, r1	; 0x04
    1224:	3a c0       	rjmp	.+116    	; 0x129a <TMU_Init+0xf6>
	{
		Struct2[j_Counter].ptr = NULL_PTR ;
    1226:	29 81       	ldd	r18, Y+1	; 0x01
    1228:	3a 81       	ldd	r19, Y+2	; 0x02
    122a:	4f e0       	ldi	r20, 0x0F	; 15
    122c:	42 9f       	mul	r20, r18
    122e:	c0 01       	movw	r24, r0
    1230:	43 9f       	mul	r20, r19
    1232:	90 0d       	add	r25, r0
    1234:	11 24       	eor	r1, r1
    1236:	84 57       	subi	r24, 0x74	; 116
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	fc 01       	movw	r30, r24
    123c:	11 82       	std	Z+1, r1	; 0x01
    123e:	10 82       	st	Z, r1
		Struct2[j_Counter].ID = FREE_ID_TASK ;
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	3a 81       	ldd	r19, Y+2	; 0x02
    1244:	4f e0       	ldi	r20, 0x0F	; 15
    1246:	42 9f       	mul	r20, r18
    1248:	c0 01       	movw	r24, r0
    124a:	43 9f       	mul	r20, r19
    124c:	90 0d       	add	r25, r0
    124e:	11 24       	eor	r1, r1
    1250:	9c 01       	movw	r18, r24
    1252:	2c 57       	subi	r18, 0x7C	; 124
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	9f ef       	ldi	r25, 0xFF	; 255
    125a:	dc 01       	movw	r26, r24
    125c:	f9 01       	movw	r30, r18
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	a2 83       	std	Z+2, r26	; 0x02
    1264:	b3 83       	std	Z+3, r27	; 0x03
		Struct2[j_Counter].Priority = 0;
    1266:	29 81       	ldd	r18, Y+1	; 0x01
    1268:	3a 81       	ldd	r19, Y+2	; 0x02
    126a:	4f e0       	ldi	r20, 0x0F	; 15
    126c:	42 9f       	mul	r20, r18
    126e:	c0 01       	movw	r24, r0
    1270:	43 9f       	mul	r20, r19
    1272:	90 0d       	add	r25, r0
    1274:	11 24       	eor	r1, r1
    1276:	88 57       	subi	r24, 0x78	; 120
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	fc 01       	movw	r30, r24
    127c:	10 82       	st	Z, r1
    127e:	11 82       	std	Z+1, r1	; 0x01
    1280:	12 82       	std	Z+2, r1	; 0x02
    1282:	13 82       	std	Z+3, r1	; 0x03
	Struct_Init->Timer_Psc = PSC_1024 ;
	Struct_Init->Res = Res ;
	/*Choosing the Right Pre-Scalar*/
	Timer_Init(Struct_Init) ;
	/************Initializing the Pointers to Null**********************/
	for(j_Counter=0;j_Counter<TASKS_NO;j_Counter++)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	ab 81       	ldd	r26, Y+3	; 0x03
    128a:	bc 81       	ldd	r27, Y+4	; 0x04
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	a1 1d       	adc	r26, r1
    1290:	b1 1d       	adc	r27, r1
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	ab 83       	std	Y+3, r26	; 0x03
    1298:	bc 83       	std	Y+4, r27	; 0x04
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	ab 81       	ldd	r26, Y+3	; 0x03
    12a0:	bc 81       	ldd	r27, Y+4	; 0x04
    12a2:	02 97       	sbiw	r24, 0x02	; 2
    12a4:	a1 05       	cpc	r26, r1
    12a6:	b1 05       	cpc	r27, r1
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <TMU_Init+0x108>
    12aa:	bd cf       	rjmp	.-134    	; 0x1226 <TMU_Init+0x82>
	{
		Struct2[j_Counter].ptr = NULL_PTR ;
		Struct2[j_Counter].ID = FREE_ID_TASK ;
		Struct2[j_Counter].Priority = 0;
	}
}
    12ac:	00 00       	nop
    12ae:	29 96       	adiw	r28, 0x09	; 9
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <TMU_Start>:
/*************This Function Takes a Pointer to Function and Delays by the Given Time***********/
u8 TMU_Start(u32 Ticks, void* FunPtr,u8 One_Shot,u32 ID_User,u32 Priority)
{
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	61 97       	sbiw	r28, 0x11	; 17
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	6b 83       	std	Y+3, r22	; 0x03
    12e6:	7c 83       	std	Y+4, r23	; 0x04
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	58 87       	std	Y+8, r21	; 0x08
    12ee:	4f 83       	std	Y+7, r20	; 0x07
    12f0:	29 87       	std	Y+9, r18	; 0x09
    12f2:	ea 86       	std	Y+10, r14	; 0x0a
    12f4:	fb 86       	std	Y+11, r15	; 0x0b
    12f6:	0c 87       	std	Y+12, r16	; 0x0c
    12f8:	1d 87       	std	Y+13, r17	; 0x0d
    12fa:	ae 86       	std	Y+14, r10	; 0x0e
    12fc:	bf 86       	std	Y+15, r11	; 0x0f
    12fe:	c8 8a       	std	Y+16, r12	; 0x10
    1300:	d9 8a       	std	Y+17, r13	; 0x11
	int i_counter = 0 ;
    1302:	1a 82       	std	Y+2, r1	; 0x02
    1304:	19 82       	std	Y+1, r1	; 0x01
	void (* PtrRun)() ;
/*****************Checking if the Pointer Was Previously Allocated in my Structure****************/
	while(i_counter < TASKS_NO)
    1306:	87 c0       	rjmp	.+270    	; 0x1416 <TMU_Start+0x156>
	{
		if(Struct2[i_counter].ID != FREE_ID_TASK)
    1308:	29 81       	ldd	r18, Y+1	; 0x01
    130a:	3a 81       	ldd	r19, Y+2	; 0x02
    130c:	4f e0       	ldi	r20, 0x0F	; 15
    130e:	42 9f       	mul	r20, r18
    1310:	c0 01       	movw	r24, r0
    1312:	43 9f       	mul	r20, r19
    1314:	90 0d       	add	r25, r0
    1316:	11 24       	eor	r1, r1
    1318:	8c 57       	subi	r24, 0x7C	; 124
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	fc 01       	movw	r30, r24
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	a2 81       	ldd	r26, Z+2	; 0x02
    1324:	b3 81       	ldd	r27, Z+3	; 0x03
    1326:	8f 3f       	cpi	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	af 4f       	sbci	r26, 0xFF	; 255
    132c:	bf 4f       	sbci	r27, 0xFF	; 255
    132e:	31 f0       	breq	.+12     	; 0x133c <TMU_Start+0x7c>
		{
			i_counter++; 
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	6d c0       	rjmp	.+218    	; 0x1416 <TMU_Start+0x156>
		}
		else if(Struct2[i_counter].ID == FREE_ID_TASK)
    133c:	29 81       	ldd	r18, Y+1	; 0x01
    133e:	3a 81       	ldd	r19, Y+2	; 0x02
    1340:	4f e0       	ldi	r20, 0x0F	; 15
    1342:	42 9f       	mul	r20, r18
    1344:	c0 01       	movw	r24, r0
    1346:	43 9f       	mul	r20, r19
    1348:	90 0d       	add	r25, r0
    134a:	11 24       	eor	r1, r1
    134c:	8c 57       	subi	r24, 0x7C	; 124
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	fc 01       	movw	r30, r24
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	a2 81       	ldd	r26, Z+2	; 0x02
    1358:	b3 81       	ldd	r27, Z+3	; 0x03
    135a:	8f 3f       	cpi	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	af 4f       	sbci	r26, 0xFF	; 255
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	09 f0       	breq	.+2      	; 0x1366 <TMU_Start+0xa6>
    1364:	58 c0       	rjmp	.+176    	; 0x1416 <TMU_Start+0x156>
		{
			//LCD_vPrintchar('H') ;
			Struct2[i_counter].ID = ID_User ;
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	ac 85       	ldd	r26, Y+12	; 0x0c
    136c:	bd 85       	ldd	r27, Y+13	; 0x0d
    136e:	49 81       	ldd	r20, Y+1	; 0x01
    1370:	5a 81       	ldd	r21, Y+2	; 0x02
    1372:	6f e0       	ldi	r22, 0x0F	; 15
    1374:	64 9f       	mul	r22, r20
    1376:	90 01       	movw	r18, r0
    1378:	65 9f       	mul	r22, r21
    137a:	30 0d       	add	r19, r0
    137c:	11 24       	eor	r1, r1
    137e:	2c 57       	subi	r18, 0x7C	; 124
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	f9 01       	movw	r30, r18
    1384:	80 83       	st	Z, r24
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	a2 83       	std	Z+2, r26	; 0x02
    138a:	b3 83       	std	Z+3, r27	; 0x03
			Struct2[i_counter].ptr = FunPtr ;
    138c:	29 81       	ldd	r18, Y+1	; 0x01
    138e:	3a 81       	ldd	r19, Y+2	; 0x02
    1390:	4f e0       	ldi	r20, 0x0F	; 15
    1392:	42 9f       	mul	r20, r18
    1394:	c0 01       	movw	r24, r0
    1396:	43 9f       	mul	r20, r19
    1398:	90 0d       	add	r25, r0
    139a:	11 24       	eor	r1, r1
    139c:	84 57       	subi	r24, 0x74	; 116
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	2f 81       	ldd	r18, Y+7	; 0x07
    13a2:	38 85       	ldd	r19, Y+8	; 0x08
    13a4:	fc 01       	movw	r30, r24
    13a6:	31 83       	std	Z+1, r19	; 0x01
    13a8:	20 83       	st	Z, r18
			Struct2[i_counter].Ticks_Delay = Ticks ;
    13aa:	29 81       	ldd	r18, Y+1	; 0x01
    13ac:	3a 81       	ldd	r19, Y+2	; 0x02
    13ae:	4f e0       	ldi	r20, 0x0F	; 15
    13b0:	42 9f       	mul	r20, r18
    13b2:	c0 01       	movw	r24, r0
    13b4:	43 9f       	mul	r20, r19
    13b6:	90 0d       	add	r25, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	9c 01       	movw	r18, r24
    13bc:	22 57       	subi	r18, 0x72	; 114
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	ad 81       	ldd	r26, Y+5	; 0x05
    13c6:	be 81       	ldd	r27, Y+6	; 0x06
    13c8:	f9 01       	movw	r30, r18
    13ca:	80 83       	st	Z, r24
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	a2 83       	std	Z+2, r26	; 0x02
    13d0:	b3 83       	std	Z+3, r27	; 0x03
			Struct2[i_counter].Periodic = One_Shot ; 
    13d2:	29 81       	ldd	r18, Y+1	; 0x01
    13d4:	3a 81       	ldd	r19, Y+2	; 0x02
    13d6:	4f e0       	ldi	r20, 0x0F	; 15
    13d8:	42 9f       	mul	r20, r18
    13da:	c0 01       	movw	r24, r0
    13dc:	43 9f       	mul	r20, r19
    13de:	90 0d       	add	r25, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	8e 56       	subi	r24, 0x6E	; 110
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	29 85       	ldd	r18, Y+9	; 0x09
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 83       	st	Z, r18
			Struct2[i_counter].Priority = Priority ;
    13ec:	29 81       	ldd	r18, Y+1	; 0x01
    13ee:	3a 81       	ldd	r19, Y+2	; 0x02
    13f0:	4f e0       	ldi	r20, 0x0F	; 15
    13f2:	42 9f       	mul	r20, r18
    13f4:	c0 01       	movw	r24, r0
    13f6:	43 9f       	mul	r20, r19
    13f8:	90 0d       	add	r25, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	9c 01       	movw	r18, r24
    13fe:	28 57       	subi	r18, 0x78	; 120
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	8e 85       	ldd	r24, Y+14	; 0x0e
    1404:	9f 85       	ldd	r25, Y+15	; 0x0f
    1406:	a8 89       	ldd	r26, Y+16	; 0x10
    1408:	b9 89       	ldd	r27, Y+17	; 0x11
    140a:	f9 01       	movw	r30, r18
    140c:	80 83       	st	Z, r24
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	a2 83       	std	Z+2, r26	; 0x02
    1412:	b3 83       	std	Z+3, r27	; 0x03
			//LCD_vPrintchar(i_counter+'0') ;
			//Ignite_Flag = 0 ;
			// Condition for breaking the loop
			//Timer_Start(Struct_Init->Timer_Channel,Struct_Init->Res) ;
			break;
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <TMU_Start+0x160>
u8 TMU_Start(u32 Ticks, void* FunPtr,u8 One_Shot,u32 ID_User,u32 Priority)
{
	int i_counter = 0 ;
	void (* PtrRun)() ;
/*****************Checking if the Pointer Was Previously Allocated in my Structure****************/
	while(i_counter < TASKS_NO)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	02 97       	sbiw	r24, 0x02	; 2
    141c:	0c f4       	brge	.+2      	; 0x1420 <TMU_Start+0x160>
    141e:	74 cf       	rjmp	.-280    	; 0x1308 <TMU_Start+0x48>
			//Timer_Start(Struct_Init->Timer_Channel,Struct_Init->Res) ;
			break;
		}
	}
	/*******Initializing the Timer*******************************/
	Timer_Start(Struct_Init->Timer_Channel,Struct_Init->Res) ;
    1420:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Struct_Init>
    1424:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Struct_Init+0x1>
    1428:	fc 01       	movw	r30, r24
    142a:	84 81       	ldd	r24, Z+4	; 0x04
    142c:	95 81       	ldd	r25, Z+5	; 0x05
    142e:	a6 81       	ldd	r26, Z+6	; 0x06
    1430:	b7 81       	ldd	r27, Z+7	; 0x07
    1432:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Struct_Init>
    1436:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Struct_Init+0x1>
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	ac 01       	movw	r20, r24
    1440:	bd 01       	movw	r22, r26
    1442:	82 2f       	mov	r24, r18
    1444:	0e 94 90 04 	call	0x920	; 0x920 <Timer_Start>
	return E_OK ;
    1448:	80 e0       	ldi	r24, 0x00	; 0
}
    144a:	61 96       	adiw	r28, 0x11	; 17
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	08 95       	ret

0000146c <Dispatcher>:
LCD_vPrintchar(Struct2[0].Ticks_Delay+'0') ;
LCD_vPrintchar(Struct2[0].Periodic+'0') ;*/
su32 One_Time = 0 ;
su8 One_Shot ;
u8 Dispatcher(void)
{
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	62 97       	sbiw	r28, 0x12	; 18
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
	/****************Initializing Varibles********************************/
	u32 Delay , i_count ;
	u32 Prio ;
	u32 k_count ;
	u32 High_Priority_U = Priority_High ;
    1480:	85 e0       	ldi	r24, 0x05	; 5
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	af 83       	std	Y+7, r26	; 0x07
    148e:	b8 87       	std	Y+8, r27	; 0x08
		//LCD_vPrintchar('R');
		Task_count++ ;
		}
	}*/
	/*****************Checking for my Conditions*****************************/
	for(i_count=0; i_count<=TASKS_NO ; i_count++)
    1490:	19 82       	std	Y+1, r1	; 0x01
    1492:	1a 82       	std	Y+2, r1	; 0x02
    1494:	1b 82       	std	Y+3, r1	; 0x03
    1496:	1c 82       	std	Y+4, r1	; 0x04
    1498:	f3 c0       	rjmp	.+486    	; 0x1680 <Dispatcher+0x214>
	{
		if(Struct2[i_count].ID == FREE_ID_TASK)
    149a:	29 81       	ldd	r18, Y+1	; 0x01
    149c:	3a 81       	ldd	r19, Y+2	; 0x02
    149e:	4f e0       	ldi	r20, 0x0F	; 15
    14a0:	42 9f       	mul	r20, r18
    14a2:	c0 01       	movw	r24, r0
    14a4:	43 9f       	mul	r20, r19
    14a6:	90 0d       	add	r25, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	8c 57       	subi	r24, 0x7C	; 124
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	fc 01       	movw	r30, r24
    14b0:	80 81       	ld	r24, Z
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	a2 81       	ldd	r26, Z+2	; 0x02
    14b6:	b3 81       	ldd	r27, Z+3	; 0x03
    14b8:	8f 3f       	cpi	r24, 0xFF	; 255
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	af 4f       	sbci	r26, 0xFF	; 255
    14be:	bf 4f       	sbci	r27, 0xFF	; 255
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <Dispatcher+0x58>
    14c2:	e8 c0       	rjmp	.+464    	; 0x1694 <Dispatcher+0x228>
		{
			break ;
		}
		else
		{
			One_Shot = Struct2[i_count].Periodic ;
    14c4:	29 81       	ldd	r18, Y+1	; 0x01
    14c6:	3a 81       	ldd	r19, Y+2	; 0x02
    14c8:	4f e0       	ldi	r20, 0x0F	; 15
    14ca:	42 9f       	mul	r20, r18
    14cc:	c0 01       	movw	r24, r0
    14ce:	43 9f       	mul	r20, r19
    14d0:	90 0d       	add	r25, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	8e 56       	subi	r24, 0x6E	; 110
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <One_Shot>
			Delay = Struct2[i_count].Ticks_Delay ;
    14e0:	29 81       	ldd	r18, Y+1	; 0x01
    14e2:	3a 81       	ldd	r19, Y+2	; 0x02
    14e4:	4f e0       	ldi	r20, 0x0F	; 15
    14e6:	42 9f       	mul	r20, r18
    14e8:	c0 01       	movw	r24, r0
    14ea:	43 9f       	mul	r20, r19
    14ec:	90 0d       	add	r25, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	82 57       	subi	r24, 0x72	; 114
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	a2 81       	ldd	r26, Z+2	; 0x02
    14fc:	b3 81       	ldd	r27, Z+3	; 0x03
    14fe:	89 87       	std	Y+9, r24	; 0x09
    1500:	9a 87       	std	Y+10, r25	; 0x0a
    1502:	ab 87       	std	Y+11, r26	; 0x0b
    1504:	bc 87       	std	Y+12, r27	; 0x0c
			Prio = Struct2[i_count].Priority ;
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	4f e0       	ldi	r20, 0x0F	; 15
    150c:	42 9f       	mul	r20, r18
    150e:	c0 01       	movw	r24, r0
    1510:	43 9f       	mul	r20, r19
    1512:	90 0d       	add	r25, r0
    1514:	11 24       	eor	r1, r1
    1516:	88 57       	subi	r24, 0x78	; 120
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	a2 81       	ldd	r26, Z+2	; 0x02
    1522:	b3 81       	ldd	r27, Z+3	; 0x03
    1524:	8d 87       	std	Y+13, r24	; 0x0d
    1526:	9e 87       	std	Y+14, r25	; 0x0e
    1528:	af 87       	std	Y+15, r26	; 0x0f
    152a:	b8 8b       	std	Y+16, r27	; 0x10
			if(One_Shot == 0)
    152c:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <One_Shot>
    1530:	88 23       	and	r24, r24
    1532:	09 f0       	breq	.+2      	; 0x1536 <Dispatcher+0xca>
    1534:	56 c0       	rjmp	.+172    	; 0x15e2 <Dispatcher+0x176>
			{
				if(((*Ignite_Flag%Delay)== 0)&& (One_Time != *Ignite_Flag) )
    1536:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    153a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	a2 81       	ldd	r26, Z+2	; 0x02
    1546:	b3 81       	ldd	r27, Z+3	; 0x03
    1548:	29 85       	ldd	r18, Y+9	; 0x09
    154a:	3a 85       	ldd	r19, Y+10	; 0x0a
    154c:	4b 85       	ldd	r20, Y+11	; 0x0b
    154e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__udivmodsi4>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	89 2b       	or	r24, r25
    155e:	8a 2b       	or	r24, r26
    1560:	8b 2b       	or	r24, r27
    1562:	09 f0       	breq	.+2      	; 0x1566 <Dispatcher+0xfa>
    1564:	82 c0       	rjmp	.+260    	; 0x166a <Dispatcher+0x1fe>
    1566:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    156a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    156e:	fc 01       	movw	r30, r24
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	a2 81       	ldd	r26, Z+2	; 0x02
    1576:	b3 81       	ldd	r27, Z+3	; 0x03
    1578:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <One_Time>
    157c:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <One_Time+0x1>
    1580:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <One_Time+0x2>
    1584:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <One_Time+0x3>
    1588:	82 17       	cp	r24, r18
    158a:	93 07       	cpc	r25, r19
    158c:	a4 07       	cpc	r26, r20
    158e:	b5 07       	cpc	r27, r21
    1590:	09 f4       	brne	.+2      	; 0x1594 <Dispatcher+0x128>
    1592:	6b c0       	rjmp	.+214    	; 0x166a <Dispatcher+0x1fe>
				{
				PtrRun = Struct2[i_count].ptr ;
    1594:	29 81       	ldd	r18, Y+1	; 0x01
    1596:	3a 81       	ldd	r19, Y+2	; 0x02
    1598:	4f e0       	ldi	r20, 0x0F	; 15
    159a:	42 9f       	mul	r20, r18
    159c:	c0 01       	movw	r24, r0
    159e:	43 9f       	mul	r20, r19
    15a0:	90 0d       	add	r25, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	84 57       	subi	r24, 0x74	; 116
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	9a 8b       	std	Y+18, r25	; 0x12
    15b0:	89 8b       	std	Y+17, r24	; 0x11
				PtrRun('B') ;
    15b2:	29 89       	ldd	r18, Y+17	; 0x11
    15b4:	3a 89       	ldd	r19, Y+18	; 0x12
    15b6:	82 e4       	ldi	r24, 0x42	; 66
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	f9 01       	movw	r30, r18
    15bc:	09 95       	icall
				One_Time =  *Ignite_Flag ;
    15be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    15c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    15c6:	fc 01       	movw	r30, r24
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	a2 81       	ldd	r26, Z+2	; 0x02
    15ce:	b3 81       	ldd	r27, Z+3	; 0x03
    15d0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <One_Time>
    15d4:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <One_Time+0x1>
    15d8:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <One_Time+0x2>
    15dc:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <One_Time+0x3>
    15e0:	44 c0       	rjmp	.+136    	; 0x166a <Dispatcher+0x1fe>
				}
			}
			else if((One_Shot == 1))
    15e2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <One_Shot>
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	09 f0       	breq	.+2      	; 0x15ec <Dispatcher+0x180>
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <Dispatcher+0x1fe>
			{
				if(One_Time != ONESHOTDONE)
    15ec:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <One_Time>
    15f0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <One_Time+0x1>
    15f4:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <One_Time+0x2>
    15f8:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <One_Time+0x3>
    15fc:	8f 3f       	cpi	r24, 0xFF	; 255
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	af 4f       	sbci	r26, 0xFF	; 255
    1602:	bf 4f       	sbci	r27, 0xFF	; 255
    1604:	91 f1       	breq	.+100    	; 0x166a <Dispatcher+0x1fe>
				{
				if(*Ignite_Flag == Delay)
    1606:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    160a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    160e:	fc 01       	movw	r30, r24
    1610:	20 81       	ld	r18, Z
    1612:	31 81       	ldd	r19, Z+1	; 0x01
    1614:	42 81       	ldd	r20, Z+2	; 0x02
    1616:	53 81       	ldd	r21, Z+3	; 0x03
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	ab 85       	ldd	r26, Y+11	; 0x0b
    161e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1620:	28 17       	cp	r18, r24
    1622:	39 07       	cpc	r19, r25
    1624:	4a 07       	cpc	r20, r26
    1626:	5b 07       	cpc	r21, r27
    1628:	01 f5       	brne	.+64     	; 0x166a <Dispatcher+0x1fe>
				{
				PtrRun = Struct2[i_count].ptr ;
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	3a 81       	ldd	r19, Y+2	; 0x02
    162e:	4f e0       	ldi	r20, 0x0F	; 15
    1630:	42 9f       	mul	r20, r18
    1632:	c0 01       	movw	r24, r0
    1634:	43 9f       	mul	r20, r19
    1636:	90 0d       	add	r25, r0
    1638:	11 24       	eor	r1, r1
    163a:	84 57       	subi	r24, 0x74	; 116
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	fc 01       	movw	r30, r24
    1640:	80 81       	ld	r24, Z
    1642:	91 81       	ldd	r25, Z+1	; 0x01
    1644:	9a 8b       	std	Y+18, r25	; 0x12
    1646:	89 8b       	std	Y+17, r24	; 0x11
				One_Time =  ONESHOTDONE ;
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	dc 01       	movw	r26, r24
    164e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <One_Time>
    1652:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <One_Time+0x1>
    1656:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <One_Time+0x2>
    165a:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <One_Time+0x3>
				PtrRun('A') ;
    165e:	29 89       	ldd	r18, Y+17	; 0x11
    1660:	3a 89       	ldd	r19, Y+18	; 0x12
    1662:	81 e4       	ldi	r24, 0x41	; 65
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	f9 01       	movw	r30, r18
    1668:	09 95       	icall
		//LCD_vPrintchar('R');
		Task_count++ ;
		}
	}*/
	/*****************Checking for my Conditions*****************************/
	for(i_count=0; i_count<=TASKS_NO ; i_count++)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	ab 81       	ldd	r26, Y+3	; 0x03
    1670:	bc 81       	ldd	r27, Y+4	; 0x04
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	a1 1d       	adc	r26, r1
    1676:	b1 1d       	adc	r27, r1
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	ab 83       	std	Y+3, r26	; 0x03
    167e:	bc 83       	std	Y+4, r27	; 0x04
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	ab 81       	ldd	r26, Y+3	; 0x03
    1686:	bc 81       	ldd	r27, Y+4	; 0x04
    1688:	03 97       	sbiw	r24, 0x03	; 3
    168a:	a1 05       	cpc	r26, r1
    168c:	b1 05       	cpc	r27, r1
    168e:	08 f4       	brcc	.+2      	; 0x1692 <Dispatcher+0x226>
    1690:	04 cf       	rjmp	.-504    	; 0x149a <Dispatcher+0x2e>
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <Dispatcher+0x22a>
	{
		if(Struct2[i_count].ID == FREE_ID_TASK)
		{
			break ;
    1694:	00 00       	nop
				}
			}
		}
	}
	//}
}
    1696:	00 00       	nop
    1698:	62 96       	adiw	r28, 0x12	; 18
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <__cmpsf2>:
    16aa:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fp_cmp>
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <__cmpsf2+0x8>
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	08 95       	ret

000016b4 <__divsf3>:
    16b4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__divsf3x>
    16b8:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__fp_round>
    16bc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_pscB>
    16c0:	58 f0       	brcs	.+22     	; 0x16d8 <__divsf3+0x24>
    16c2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fp_pscA>
    16c6:	40 f0       	brcs	.+16     	; 0x16d8 <__divsf3+0x24>
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <__divsf3+0x20>
    16ca:	5f 3f       	cpi	r21, 0xFF	; 255
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <__divsf3+0x24>
    16ce:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_inf>
    16d2:	51 11       	cpse	r21, r1
    16d4:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__fp_szero>
    16d8:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__fp_nan>

000016dc <__divsf3x>:
    16dc:	0e 94 84 0c 	call	0x1908	; 0x1908 <__fp_split3>
    16e0:	68 f3       	brcs	.-38     	; 0x16bc <__divsf3+0x8>

000016e2 <__divsf3_pse>:
    16e2:	99 23       	and	r25, r25
    16e4:	b1 f3       	breq	.-20     	; 0x16d2 <__divsf3+0x1e>
    16e6:	55 23       	and	r21, r21
    16e8:	91 f3       	breq	.-28     	; 0x16ce <__divsf3+0x1a>
    16ea:	95 1b       	sub	r25, r21
    16ec:	55 0b       	sbc	r21, r21
    16ee:	bb 27       	eor	r27, r27
    16f0:	aa 27       	eor	r26, r26
    16f2:	62 17       	cp	r22, r18
    16f4:	73 07       	cpc	r23, r19
    16f6:	84 07       	cpc	r24, r20
    16f8:	38 f0       	brcs	.+14     	; 0x1708 <__divsf3_pse+0x26>
    16fa:	9f 5f       	subi	r25, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	22 0f       	add	r18, r18
    1700:	33 1f       	adc	r19, r19
    1702:	44 1f       	adc	r20, r20
    1704:	aa 1f       	adc	r26, r26
    1706:	a9 f3       	breq	.-22     	; 0x16f2 <__divsf3_pse+0x10>
    1708:	35 d0       	rcall	.+106    	; 0x1774 <__divsf3_pse+0x92>
    170a:	0e 2e       	mov	r0, r30
    170c:	3a f0       	brmi	.+14     	; 0x171c <__divsf3_pse+0x3a>
    170e:	e0 e8       	ldi	r30, 0x80	; 128
    1710:	32 d0       	rcall	.+100    	; 0x1776 <__divsf3_pse+0x94>
    1712:	91 50       	subi	r25, 0x01	; 1
    1714:	50 40       	sbci	r21, 0x00	; 0
    1716:	e6 95       	lsr	r30
    1718:	00 1c       	adc	r0, r0
    171a:	ca f7       	brpl	.-14     	; 0x170e <__divsf3_pse+0x2c>
    171c:	2b d0       	rcall	.+86     	; 0x1774 <__divsf3_pse+0x92>
    171e:	fe 2f       	mov	r31, r30
    1720:	29 d0       	rcall	.+82     	; 0x1774 <__divsf3_pse+0x92>
    1722:	66 0f       	add	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	88 1f       	adc	r24, r24
    1728:	bb 1f       	adc	r27, r27
    172a:	26 17       	cp	r18, r22
    172c:	37 07       	cpc	r19, r23
    172e:	48 07       	cpc	r20, r24
    1730:	ab 07       	cpc	r26, r27
    1732:	b0 e8       	ldi	r27, 0x80	; 128
    1734:	09 f0       	breq	.+2      	; 0x1738 <__divsf3_pse+0x56>
    1736:	bb 0b       	sbc	r27, r27
    1738:	80 2d       	mov	r24, r0
    173a:	bf 01       	movw	r22, r30
    173c:	ff 27       	eor	r31, r31
    173e:	93 58       	subi	r25, 0x83	; 131
    1740:	5f 4f       	sbci	r21, 0xFF	; 255
    1742:	3a f0       	brmi	.+14     	; 0x1752 <__divsf3_pse+0x70>
    1744:	9e 3f       	cpi	r25, 0xFE	; 254
    1746:	51 05       	cpc	r21, r1
    1748:	78 f0       	brcs	.+30     	; 0x1768 <__divsf3_pse+0x86>
    174a:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_inf>
    174e:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__fp_szero>
    1752:	5f 3f       	cpi	r21, 0xFF	; 255
    1754:	e4 f3       	brlt	.-8      	; 0x174e <__divsf3_pse+0x6c>
    1756:	98 3e       	cpi	r25, 0xE8	; 232
    1758:	d4 f3       	brlt	.-12     	; 0x174e <__divsf3_pse+0x6c>
    175a:	86 95       	lsr	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	b7 95       	ror	r27
    1762:	f7 95       	ror	r31
    1764:	9f 5f       	subi	r25, 0xFF	; 255
    1766:	c9 f7       	brne	.-14     	; 0x175a <__divsf3_pse+0x78>
    1768:	88 0f       	add	r24, r24
    176a:	91 1d       	adc	r25, r1
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	97 f9       	bld	r25, 7
    1772:	08 95       	ret
    1774:	e1 e0       	ldi	r30, 0x01	; 1
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	bb 1f       	adc	r27, r27
    177e:	62 17       	cp	r22, r18
    1780:	73 07       	cpc	r23, r19
    1782:	84 07       	cpc	r24, r20
    1784:	ba 07       	cpc	r27, r26
    1786:	20 f0       	brcs	.+8      	; 0x1790 <__divsf3_pse+0xae>
    1788:	62 1b       	sub	r22, r18
    178a:	73 0b       	sbc	r23, r19
    178c:	84 0b       	sbc	r24, r20
    178e:	ba 0b       	sbc	r27, r26
    1790:	ee 1f       	adc	r30, r30
    1792:	88 f7       	brcc	.-30     	; 0x1776 <__divsf3_pse+0x94>
    1794:	e0 95       	com	r30
    1796:	08 95       	ret

00001798 <__fixunssfsi>:
    1798:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__fp_splitA>
    179c:	88 f0       	brcs	.+34     	; 0x17c0 <__fixunssfsi+0x28>
    179e:	9f 57       	subi	r25, 0x7F	; 127
    17a0:	98 f0       	brcs	.+38     	; 0x17c8 <__fixunssfsi+0x30>
    17a2:	b9 2f       	mov	r27, r25
    17a4:	99 27       	eor	r25, r25
    17a6:	b7 51       	subi	r27, 0x17	; 23
    17a8:	b0 f0       	brcs	.+44     	; 0x17d6 <__fixunssfsi+0x3e>
    17aa:	e1 f0       	breq	.+56     	; 0x17e4 <__fixunssfsi+0x4c>
    17ac:	66 0f       	add	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	1a f0       	brmi	.+6      	; 0x17bc <__fixunssfsi+0x24>
    17b6:	ba 95       	dec	r27
    17b8:	c9 f7       	brne	.-14     	; 0x17ac <__fixunssfsi+0x14>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <__fixunssfsi+0x4c>
    17bc:	b1 30       	cpi	r27, 0x01	; 1
    17be:	91 f0       	breq	.+36     	; 0x17e4 <__fixunssfsi+0x4c>
    17c0:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fp_zero>
    17c4:	b1 e0       	ldi	r27, 0x01	; 1
    17c6:	08 95       	ret
    17c8:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_zero>
    17cc:	67 2f       	mov	r22, r23
    17ce:	78 2f       	mov	r23, r24
    17d0:	88 27       	eor	r24, r24
    17d2:	b8 5f       	subi	r27, 0xF8	; 248
    17d4:	39 f0       	breq	.+14     	; 0x17e4 <__fixunssfsi+0x4c>
    17d6:	b9 3f       	cpi	r27, 0xF9	; 249
    17d8:	cc f3       	brlt	.-14     	; 0x17cc <__fixunssfsi+0x34>
    17da:	86 95       	lsr	r24
    17dc:	77 95       	ror	r23
    17de:	67 95       	ror	r22
    17e0:	b3 95       	inc	r27
    17e2:	d9 f7       	brne	.-10     	; 0x17da <__fixunssfsi+0x42>
    17e4:	3e f4       	brtc	.+14     	; 0x17f4 <__fixunssfsi+0x5c>
    17e6:	90 95       	com	r25
    17e8:	80 95       	com	r24
    17ea:	70 95       	com	r23
    17ec:	61 95       	neg	r22
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8f 4f       	sbci	r24, 0xFF	; 255
    17f2:	9f 4f       	sbci	r25, 0xFF	; 255
    17f4:	08 95       	ret

000017f6 <__floatunsisf>:
    17f6:	e8 94       	clt
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <__floatsisf+0x12>

000017fa <__floatsisf>:
    17fa:	97 fb       	bst	r25, 7
    17fc:	3e f4       	brtc	.+14     	; 0x180c <__floatsisf+0x12>
    17fe:	90 95       	com	r25
    1800:	80 95       	com	r24
    1802:	70 95       	com	r23
    1804:	61 95       	neg	r22
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	8f 4f       	sbci	r24, 0xFF	; 255
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	99 23       	and	r25, r25
    180e:	a9 f0       	breq	.+42     	; 0x183a <__floatsisf+0x40>
    1810:	f9 2f       	mov	r31, r25
    1812:	96 e9       	ldi	r25, 0x96	; 150
    1814:	bb 27       	eor	r27, r27
    1816:	93 95       	inc	r25
    1818:	f6 95       	lsr	r31
    181a:	87 95       	ror	r24
    181c:	77 95       	ror	r23
    181e:	67 95       	ror	r22
    1820:	b7 95       	ror	r27
    1822:	f1 11       	cpse	r31, r1
    1824:	f8 cf       	rjmp	.-16     	; 0x1816 <__floatsisf+0x1c>
    1826:	fa f4       	brpl	.+62     	; 0x1866 <__floatsisf+0x6c>
    1828:	bb 0f       	add	r27, r27
    182a:	11 f4       	brne	.+4      	; 0x1830 <__floatsisf+0x36>
    182c:	60 ff       	sbrs	r22, 0
    182e:	1b c0       	rjmp	.+54     	; 0x1866 <__floatsisf+0x6c>
    1830:	6f 5f       	subi	r22, 0xFF	; 255
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	8f 4f       	sbci	r24, 0xFF	; 255
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	16 c0       	rjmp	.+44     	; 0x1866 <__floatsisf+0x6c>
    183a:	88 23       	and	r24, r24
    183c:	11 f0       	breq	.+4      	; 0x1842 <__floatsisf+0x48>
    183e:	96 e9       	ldi	r25, 0x96	; 150
    1840:	11 c0       	rjmp	.+34     	; 0x1864 <__floatsisf+0x6a>
    1842:	77 23       	and	r23, r23
    1844:	21 f0       	breq	.+8      	; 0x184e <__floatsisf+0x54>
    1846:	9e e8       	ldi	r25, 0x8E	; 142
    1848:	87 2f       	mov	r24, r23
    184a:	76 2f       	mov	r23, r22
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <__floatsisf+0x5e>
    184e:	66 23       	and	r22, r22
    1850:	71 f0       	breq	.+28     	; 0x186e <__floatsisf+0x74>
    1852:	96 e8       	ldi	r25, 0x86	; 134
    1854:	86 2f       	mov	r24, r22
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	2a f0       	brmi	.+10     	; 0x1866 <__floatsisf+0x6c>
    185c:	9a 95       	dec	r25
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	da f7       	brpl	.-10     	; 0x185c <__floatsisf+0x62>
    1866:	88 0f       	add	r24, r24
    1868:	96 95       	lsr	r25
    186a:	87 95       	ror	r24
    186c:	97 f9       	bld	r25, 7
    186e:	08 95       	ret

00001870 <__fp_cmp>:
    1870:	99 0f       	add	r25, r25
    1872:	00 08       	sbc	r0, r0
    1874:	55 0f       	add	r21, r21
    1876:	aa 0b       	sbc	r26, r26
    1878:	e0 e8       	ldi	r30, 0x80	; 128
    187a:	fe ef       	ldi	r31, 0xFE	; 254
    187c:	16 16       	cp	r1, r22
    187e:	17 06       	cpc	r1, r23
    1880:	e8 07       	cpc	r30, r24
    1882:	f9 07       	cpc	r31, r25
    1884:	c0 f0       	brcs	.+48     	; 0x18b6 <__fp_cmp+0x46>
    1886:	12 16       	cp	r1, r18
    1888:	13 06       	cpc	r1, r19
    188a:	e4 07       	cpc	r30, r20
    188c:	f5 07       	cpc	r31, r21
    188e:	98 f0       	brcs	.+38     	; 0x18b6 <__fp_cmp+0x46>
    1890:	62 1b       	sub	r22, r18
    1892:	73 0b       	sbc	r23, r19
    1894:	84 0b       	sbc	r24, r20
    1896:	95 0b       	sbc	r25, r21
    1898:	39 f4       	brne	.+14     	; 0x18a8 <__fp_cmp+0x38>
    189a:	0a 26       	eor	r0, r26
    189c:	61 f0       	breq	.+24     	; 0x18b6 <__fp_cmp+0x46>
    189e:	23 2b       	or	r18, r19
    18a0:	24 2b       	or	r18, r20
    18a2:	25 2b       	or	r18, r21
    18a4:	21 f4       	brne	.+8      	; 0x18ae <__fp_cmp+0x3e>
    18a6:	08 95       	ret
    18a8:	0a 26       	eor	r0, r26
    18aa:	09 f4       	brne	.+2      	; 0x18ae <__fp_cmp+0x3e>
    18ac:	a1 40       	sbci	r26, 0x01	; 1
    18ae:	a6 95       	lsr	r26
    18b0:	8f ef       	ldi	r24, 0xFF	; 255
    18b2:	81 1d       	adc	r24, r1
    18b4:	81 1d       	adc	r24, r1
    18b6:	08 95       	ret

000018b8 <__fp_inf>:
    18b8:	97 f9       	bld	r25, 7
    18ba:	9f 67       	ori	r25, 0x7F	; 127
    18bc:	80 e8       	ldi	r24, 0x80	; 128
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	08 95       	ret

000018c4 <__fp_nan>:
    18c4:	9f ef       	ldi	r25, 0xFF	; 255
    18c6:	80 ec       	ldi	r24, 0xC0	; 192
    18c8:	08 95       	ret

000018ca <__fp_pscA>:
    18ca:	00 24       	eor	r0, r0
    18cc:	0a 94       	dec	r0
    18ce:	16 16       	cp	r1, r22
    18d0:	17 06       	cpc	r1, r23
    18d2:	18 06       	cpc	r1, r24
    18d4:	09 06       	cpc	r0, r25
    18d6:	08 95       	ret

000018d8 <__fp_pscB>:
    18d8:	00 24       	eor	r0, r0
    18da:	0a 94       	dec	r0
    18dc:	12 16       	cp	r1, r18
    18de:	13 06       	cpc	r1, r19
    18e0:	14 06       	cpc	r1, r20
    18e2:	05 06       	cpc	r0, r21
    18e4:	08 95       	ret

000018e6 <__fp_round>:
    18e6:	09 2e       	mov	r0, r25
    18e8:	03 94       	inc	r0
    18ea:	00 0c       	add	r0, r0
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <__fp_round+0xc>
    18ee:	88 23       	and	r24, r24
    18f0:	52 f0       	brmi	.+20     	; 0x1906 <__fp_round+0x20>
    18f2:	bb 0f       	add	r27, r27
    18f4:	40 f4       	brcc	.+16     	; 0x1906 <__fp_round+0x20>
    18f6:	bf 2b       	or	r27, r31
    18f8:	11 f4       	brne	.+4      	; 0x18fe <__fp_round+0x18>
    18fa:	60 ff       	sbrs	r22, 0
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <__fp_round+0x20>
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	08 95       	ret

00001908 <__fp_split3>:
    1908:	57 fd       	sbrc	r21, 7
    190a:	90 58       	subi	r25, 0x80	; 128
    190c:	44 0f       	add	r20, r20
    190e:	55 1f       	adc	r21, r21
    1910:	59 f0       	breq	.+22     	; 0x1928 <__fp_splitA+0x10>
    1912:	5f 3f       	cpi	r21, 0xFF	; 255
    1914:	71 f0       	breq	.+28     	; 0x1932 <__fp_splitA+0x1a>
    1916:	47 95       	ror	r20

00001918 <__fp_splitA>:
    1918:	88 0f       	add	r24, r24
    191a:	97 fb       	bst	r25, 7
    191c:	99 1f       	adc	r25, r25
    191e:	61 f0       	breq	.+24     	; 0x1938 <__fp_splitA+0x20>
    1920:	9f 3f       	cpi	r25, 0xFF	; 255
    1922:	79 f0       	breq	.+30     	; 0x1942 <__fp_splitA+0x2a>
    1924:	87 95       	ror	r24
    1926:	08 95       	ret
    1928:	12 16       	cp	r1, r18
    192a:	13 06       	cpc	r1, r19
    192c:	14 06       	cpc	r1, r20
    192e:	55 1f       	adc	r21, r21
    1930:	f2 cf       	rjmp	.-28     	; 0x1916 <__fp_split3+0xe>
    1932:	46 95       	lsr	r20
    1934:	f1 df       	rcall	.-30     	; 0x1918 <__fp_splitA>
    1936:	08 c0       	rjmp	.+16     	; 0x1948 <__fp_splitA+0x30>
    1938:	16 16       	cp	r1, r22
    193a:	17 06       	cpc	r1, r23
    193c:	18 06       	cpc	r1, r24
    193e:	99 1f       	adc	r25, r25
    1940:	f1 cf       	rjmp	.-30     	; 0x1924 <__fp_splitA+0xc>
    1942:	86 95       	lsr	r24
    1944:	71 05       	cpc	r23, r1
    1946:	61 05       	cpc	r22, r1
    1948:	08 94       	sec
    194a:	08 95       	ret

0000194c <__fp_zero>:
    194c:	e8 94       	clt

0000194e <__fp_szero>:
    194e:	bb 27       	eor	r27, r27
    1950:	66 27       	eor	r22, r22
    1952:	77 27       	eor	r23, r23
    1954:	cb 01       	movw	r24, r22
    1956:	97 f9       	bld	r25, 7
    1958:	08 95       	ret

0000195a <__gesf2>:
    195a:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fp_cmp>
    195e:	08 f4       	brcc	.+2      	; 0x1962 <__gesf2+0x8>
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	08 95       	ret

00001964 <__mulsf3>:
    1964:	0e 94 c5 0c 	call	0x198a	; 0x198a <__mulsf3x>
    1968:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__fp_round>
    196c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fp_pscA>
    1970:	38 f0       	brcs	.+14     	; 0x1980 <__mulsf3+0x1c>
    1972:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_pscB>
    1976:	20 f0       	brcs	.+8      	; 0x1980 <__mulsf3+0x1c>
    1978:	95 23       	and	r25, r21
    197a:	11 f0       	breq	.+4      	; 0x1980 <__mulsf3+0x1c>
    197c:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_inf>
    1980:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__fp_nan>
    1984:	11 24       	eor	r1, r1
    1986:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__fp_szero>

0000198a <__mulsf3x>:
    198a:	0e 94 84 0c 	call	0x1908	; 0x1908 <__fp_split3>
    198e:	70 f3       	brcs	.-36     	; 0x196c <__mulsf3+0x8>

00001990 <__mulsf3_pse>:
    1990:	95 9f       	mul	r25, r21
    1992:	c1 f3       	breq	.-16     	; 0x1984 <__mulsf3+0x20>
    1994:	95 0f       	add	r25, r21
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	55 1f       	adc	r21, r21
    199a:	62 9f       	mul	r22, r18
    199c:	f0 01       	movw	r30, r0
    199e:	72 9f       	mul	r23, r18
    19a0:	bb 27       	eor	r27, r27
    19a2:	f0 0d       	add	r31, r0
    19a4:	b1 1d       	adc	r27, r1
    19a6:	63 9f       	mul	r22, r19
    19a8:	aa 27       	eor	r26, r26
    19aa:	f0 0d       	add	r31, r0
    19ac:	b1 1d       	adc	r27, r1
    19ae:	aa 1f       	adc	r26, r26
    19b0:	64 9f       	mul	r22, r20
    19b2:	66 27       	eor	r22, r22
    19b4:	b0 0d       	add	r27, r0
    19b6:	a1 1d       	adc	r26, r1
    19b8:	66 1f       	adc	r22, r22
    19ba:	82 9f       	mul	r24, r18
    19bc:	22 27       	eor	r18, r18
    19be:	b0 0d       	add	r27, r0
    19c0:	a1 1d       	adc	r26, r1
    19c2:	62 1f       	adc	r22, r18
    19c4:	73 9f       	mul	r23, r19
    19c6:	b0 0d       	add	r27, r0
    19c8:	a1 1d       	adc	r26, r1
    19ca:	62 1f       	adc	r22, r18
    19cc:	83 9f       	mul	r24, r19
    19ce:	a0 0d       	add	r26, r0
    19d0:	61 1d       	adc	r22, r1
    19d2:	22 1f       	adc	r18, r18
    19d4:	74 9f       	mul	r23, r20
    19d6:	33 27       	eor	r19, r19
    19d8:	a0 0d       	add	r26, r0
    19da:	61 1d       	adc	r22, r1
    19dc:	23 1f       	adc	r18, r19
    19de:	84 9f       	mul	r24, r20
    19e0:	60 0d       	add	r22, r0
    19e2:	21 1d       	adc	r18, r1
    19e4:	82 2f       	mov	r24, r18
    19e6:	76 2f       	mov	r23, r22
    19e8:	6a 2f       	mov	r22, r26
    19ea:	11 24       	eor	r1, r1
    19ec:	9f 57       	subi	r25, 0x7F	; 127
    19ee:	50 40       	sbci	r21, 0x00	; 0
    19f0:	9a f0       	brmi	.+38     	; 0x1a18 <__mulsf3_pse+0x88>
    19f2:	f1 f0       	breq	.+60     	; 0x1a30 <__mulsf3_pse+0xa0>
    19f4:	88 23       	and	r24, r24
    19f6:	4a f0       	brmi	.+18     	; 0x1a0a <__mulsf3_pse+0x7a>
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	bb 1f       	adc	r27, r27
    19fe:	66 1f       	adc	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	91 50       	subi	r25, 0x01	; 1
    1a06:	50 40       	sbci	r21, 0x00	; 0
    1a08:	a9 f7       	brne	.-22     	; 0x19f4 <__mulsf3_pse+0x64>
    1a0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0c:	51 05       	cpc	r21, r1
    1a0e:	80 f0       	brcs	.+32     	; 0x1a30 <__mulsf3_pse+0xa0>
    1a10:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_inf>
    1a14:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__fp_szero>
    1a18:	5f 3f       	cpi	r21, 0xFF	; 255
    1a1a:	e4 f3       	brlt	.-8      	; 0x1a14 <__mulsf3_pse+0x84>
    1a1c:	98 3e       	cpi	r25, 0xE8	; 232
    1a1e:	d4 f3       	brlt	.-12     	; 0x1a14 <__mulsf3_pse+0x84>
    1a20:	86 95       	lsr	r24
    1a22:	77 95       	ror	r23
    1a24:	67 95       	ror	r22
    1a26:	b7 95       	ror	r27
    1a28:	f7 95       	ror	r31
    1a2a:	e7 95       	ror	r30
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	c1 f7       	brne	.-16     	; 0x1a20 <__mulsf3_pse+0x90>
    1a30:	fe 2b       	or	r31, r30
    1a32:	88 0f       	add	r24, r24
    1a34:	91 1d       	adc	r25, r1
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	08 95       	ret

00001a3e <__udivmodsi4>:
    1a3e:	a1 e2       	ldi	r26, 0x21	; 33
    1a40:	1a 2e       	mov	r1, r26
    1a42:	aa 1b       	sub	r26, r26
    1a44:	bb 1b       	sub	r27, r27
    1a46:	fd 01       	movw	r30, r26
    1a48:	0d c0       	rjmp	.+26     	; 0x1a64 <__udivmodsi4_ep>

00001a4a <__udivmodsi4_loop>:
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	ee 1f       	adc	r30, r30
    1a50:	ff 1f       	adc	r31, r31
    1a52:	a2 17       	cp	r26, r18
    1a54:	b3 07       	cpc	r27, r19
    1a56:	e4 07       	cpc	r30, r20
    1a58:	f5 07       	cpc	r31, r21
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <__udivmodsi4_ep>
    1a5c:	a2 1b       	sub	r26, r18
    1a5e:	b3 0b       	sbc	r27, r19
    1a60:	e4 0b       	sbc	r30, r20
    1a62:	f5 0b       	sbc	r31, r21

00001a64 <__udivmodsi4_ep>:
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	1a 94       	dec	r1
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <__udivmodsi4_loop>
    1a70:	60 95       	com	r22
    1a72:	70 95       	com	r23
    1a74:	80 95       	com	r24
    1a76:	90 95       	com	r25
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	bd 01       	movw	r22, r26
    1a7e:	cf 01       	movw	r24, r30
    1a80:	08 95       	ret

00001a82 <__muluhisi3>:
    1a82:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__umulhisi3>
    1a86:	a5 9f       	mul	r26, r21
    1a88:	90 0d       	add	r25, r0
    1a8a:	b4 9f       	mul	r27, r20
    1a8c:	90 0d       	add	r25, r0
    1a8e:	a4 9f       	mul	r26, r20
    1a90:	80 0d       	add	r24, r0
    1a92:	91 1d       	adc	r25, r1
    1a94:	11 24       	eor	r1, r1
    1a96:	08 95       	ret

00001a98 <__umulhisi3>:
    1a98:	a2 9f       	mul	r26, r18
    1a9a:	b0 01       	movw	r22, r0
    1a9c:	b3 9f       	mul	r27, r19
    1a9e:	c0 01       	movw	r24, r0
    1aa0:	a3 9f       	mul	r26, r19
    1aa2:	70 0d       	add	r23, r0
    1aa4:	81 1d       	adc	r24, r1
    1aa6:	11 24       	eor	r1, r1
    1aa8:	91 1d       	adc	r25, r1
    1aaa:	b2 9f       	mul	r27, r18
    1aac:	70 0d       	add	r23, r0
    1aae:	81 1d       	adc	r24, r1
    1ab0:	11 24       	eor	r1, r1
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	08 95       	ret

00001ab6 <_exit>:
    1ab6:	f8 94       	cli

00001ab8 <__stop_program>:
    1ab8:	ff cf       	rjmp	.-2      	; 0x1ab8 <__stop_program>
