
ADC_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c6  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000890  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003e2  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010d  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036c  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e8  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002e  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:


void ADC_vInit(void)
{
	/*choose Vref*/
	SET_BIT(ADMUX,REFS0) ;
  92:	3e 9a       	sbi	0x07, 6	; 7
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADEN) ;
  94:	37 9a       	sbi	0x06, 7	; 6
	/*Select Clock / 64*/
	SET_BIT(ADCSRA,ADPS2);
  96:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  98:	31 9a       	sbi	0x06, 1	; 6
	/**/
}
  9a:	08 95       	ret

0000009c <ADC_u16Read>:

unsigned short ADC_u16Read(void) 
{
	unsigned short temp  ;
	/*Start conversion*/
	SET_BIT(ADCSRA,ADSC) ;
  9c:	36 9a       	sbi	0x06, 6	; 6
	/*check ADIF*/                 // your ADC COnverter reg will not 
	while((READ_BIT(ADCSRA,ADIF) == 0)) 
  9e:	34 9b       	sbis	0x06, 4	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_u16Read+0x2>
      /* DO NOTHING */
	}
	/*ptr = & val ;
	*(ptr) = ADCH ;
	*(ptr+1) = ADCL ;*/
	temp = ADCL ;
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	90 e0       	ldi	r25, 0x00	; 0
	temp |= (unsigned short) (ADCH<<8) ;
  a6:	45 b1       	in	r20, 0x05	; 5
  a8:	34 2f       	mov	r19, r20
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	82 2b       	or	r24, r18
  ae:	93 2b       	or	r25, r19
	return temp ;
  b0:	08 95       	ret

000000b2 <main>:
# include <avr/interrupt.h>


int main(void)
{
	ADC_vInit() ;
  b2:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	unsigned short val ;
	DDRD = 0xFF ;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
       val = ADC_u16Read() ;
  ba:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_u16Read>
	   PORTD = val ;
  be:	82 bb       	out	0x12, r24	; 18
  c0:	fc cf       	rjmp	.-8      	; 0xba <main+0x8>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
