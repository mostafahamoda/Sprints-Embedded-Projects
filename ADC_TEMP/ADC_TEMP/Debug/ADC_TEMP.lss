
ADC_TEMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9f  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00000d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000550  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000384  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_vInit_manual>:
	temp = ADCL ;
	temp |= (unsigned short) (ADCH<<8) ;
	return temp ;
	
			
}
  6c:	3e 9a       	sbi	0x07, 6	; 7
  6e:	3f 98       	cbi	0x07, 7	; 7
  70:	88 30       	cpi	r24, 0x08	; 8
  72:	09 f4       	brne	.+2      	; 0x76 <ADC_vInit_manual+0xa>
  74:	3d 9a       	sbi	0x07, 5	; 7
  76:	37 9a       	sbi	0x06, 7	; 6
  78:	32 9a       	sbi	0x06, 2	; 6
  7a:	31 9a       	sbi	0x06, 1	; 6
  7c:	30 98       	cbi	0x06, 0	; 6
  7e:	08 95       	ret

00000080 <ADC_vRead_manual_8bits>:

char ADC_vRead_manual_8bits(void)
{
	char temp ;
	// Start Conversion using the ADC by setting the ADSC
	SET_BIT(ADCSRA,ADSC) ;
  80:	36 9a       	sbi	0x06, 6	; 6
	// checking the conversion flag
	while((READ_BIT(ADCSRA,ADIF)) == 0)
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <ADC_vRead_manual_8bits+0x2>
	{
		// Do Nothing
	}
	temp = ADCH ;
  86:	85 b1       	in	r24, 0x05	; 5
	
  88:	08 95       	ret

0000008a <sendfallingedge>:
 
 #elif defined LCD_4
 
 void sendfallingedge(void)
 {
	 SET_BIT(PORTA,EN) ;
  8a:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	8f e3       	ldi	r24, 0x3F	; 63
  8e:	9f e1       	ldi	r25, 0x1F	; 31
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <sendfallingedge+0x6>
  94:	00 c0       	rjmp	.+0      	; 0x96 <sendfallingedge+0xc>
  96:	00 00       	nop
	 _delay_ms(4) ;
	 CLR_BIT(PORTA,EN) ;
  98:	db 98       	cbi	0x1b, 3	; 27
  9a:	8f e3       	ldi	r24, 0x3F	; 63
  9c:	9f e1       	ldi	r25, 0x1F	; 31
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendfallingedge+0x14>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <sendfallingedge+0x1a>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <LCD_vSendCmd>:
	 _delay_ms(4) ;
 }
  void LCD_vSendCmd(char cmd)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	CLR_BIT(PORTA,RS) ;
  ac:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= 0x0f  ;
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	8b bb       	out	0x1b, r24	; 27
	PORTA |= cmd&0xf0 ;
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	9c 2f       	mov	r25, r28
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	89 2b       	or	r24, r25
  bc:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
  be:	0e 94 45 00 	call	0x8a	; 0x8a <sendfallingedge>
	PORTA &= 0x0f ;
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (cmd<<4) ;
  c8:	2b b3       	in	r18, 0x1b	; 27
  ca:	30 e1       	ldi	r19, 0x10	; 16
  cc:	c3 9f       	mul	r28, r19
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	82 2b       	or	r24, r18
  d4:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
  d6:	0e 94 45 00 	call	0x8a	; 0x8a <sendfallingedge>
}
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <LCD_vInit>:

  void LCD_vInit(void)
{
	DDRA = 0xF0 ;
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	8a bb       	out	0x1a, r24	; 26
	DDRA |= 0x0E ;
  e2:	8a b3       	in	r24, 0x1a	; 26
  e4:	8e 60       	ori	r24, 0x0E	; 14
  e6:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(PORTA,RW) ;
  e8:	da 98       	cbi	0x1b, 2	; 27
	LCD_vSendCmd(0x33) ;
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_vSendCmd>
	LCD_vSendCmd(0x32) ;
  f0:	82 e3       	ldi	r24, 0x32	; 50
  f2:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_vSendCmd>
	LCD_vSendCmd(0x28) ;
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_vSendCmd>
	// blink cursor
	LCD_vSendCmd(0x0F) ;
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_vSendCmd>
	// clear screen
	LCD_vSendCmd(0x01) ;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_vSendCmd>
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_vInit+0x2e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_vInit+0x34>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <LCD_vPrintchar>:
	_delay_ms(20) ;
}
  void LCD_vPrintchar(char data)
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	SET_BIT(PORTA,RS) ;
 11a:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA &= 0x0f  ;
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b bb       	out	0x1b, r24	; 27
	PORTA |= data&0xf0 ;
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	9c 2f       	mov	r25, r28
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	89 2b       	or	r24, r25
 12a:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
 12c:	0e 94 45 00 	call	0x8a	; 0x8a <sendfallingedge>
	PORTA &= 0x0f ;
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (data<<4) ;
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	30 e1       	ldi	r19, 0x10	; 16
 13a:	c3 9f       	mul	r28, r19
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	82 2b       	or	r24, r18
 142:	8b bb       	out	0x1b, r24	; 27
	sendfallingedge() ;
 144:	0e 94 45 00 	call	0x8a	; 0x8a <sendfallingedge>
}
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <main>:
#include "avr/io.h"
#include "LCD_head.h"

int main(void)
{
    ADC_vInit_manual(8) ;
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_vInit_manual>
	LCD_vInit() ;
 152:	0e 94 6f 00 	call	0xde	; 0xde <LCD_vInit>
	char Read ;
    while (1) 
    {
		Read = ADC_vRead_manual_8bits() ;
 156:	0e 94 40 00 	call	0x80	; 0x80 <ADC_vRead_manual_8bits>
		LCD_vPrintchar(Read) ;
 15a:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_vPrintchar>
 15e:	fb cf       	rjmp	.-10     	; 0x156 <main+0xa>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
